<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[java实现多线程的三种方式]]></title>
      <url>http://yoursite.com/2017/02/18/java%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/img/multithread_state.jpg" width="900" height="600" alt="multithread_state" align="center"><br>总结实现多线程的三种方式。<br><a id="more"></a></p>
<h1 id="三种方式"><a href="#三种方式" class="headerlink" title="三种方式"></a>三种方式</h1><ol>
<li>通过继承 Thread 类本身；</li>
<li>通过实现 Runnable 接口；</li>
<li>通过 Callable 和 Future 创建线程。</li>
</ol>
<p>1,2无返回值，3返回future对象。其实Thread中的run方法调用的是Runnable接口的run方法。Thread和Runnable都实现了run方法，这种操作模式其实就是代理模式。</p>
<p>2相对于1灵活性更好，因为接口可以多实现，同时还可以继承其他类，而1无法完成；而且2方便共享资源：同一份资源，多个代理访问。</p>
<h1 id="直接集成Thread类"><a href="#直接集成Thread类" class="headerlink" title="直接集成Thread类"></a>直接集成Thread类</h1><p>在Java中负责线程这个功能的是Java.lang.Thread这个类。 可以通过创建Thread的实例来创建新的线程。 每个线程都是通个某个特定Thread对象所对应的方法run()来完成其操作的，方法run()称为线程体。 通过调用Thread类的start()方法来启动一个线程。</p>
<p>代码大致框架如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">	属性<span class="number">1</span>；</div><div class="line">	属性<span class="number">2</span>；</div><div class="line">	…</div><div class="line">	方法<span class="number">1</span>;</div><div class="line">	方法<span class="number">2</span>；</div><div class="line">	…</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">// other code…</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个小例子，每个线程进行5次打印。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;  </div><div class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;  </div><div class="line">                System.out.println(<span class="string">"count= "</span> + count--);  </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">            	<span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">    	TestThread h1 = <span class="keyword">new</span> TestThread();  </div><div class="line">    	TestThread h2 = <span class="keyword">new</span> TestThread();  </div><div class="line">    	TestThread h3 = <span class="keyword">new</span> TestThread();  </div><div class="line">        h1.start();  </div><div class="line">        h2.start();  </div><div class="line">        h3.start();  </div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">5</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>某次的运行结果：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">h2</span>: count= <span class="number">5</span></div><div class="line"><span class="selector-tag">h2</span>: count= <span class="number">4</span></div><div class="line"><span class="selector-tag">h2</span>: count= <span class="number">3</span></div><div class="line"><span class="selector-tag">h2</span>: count= <span class="number">2</span></div><div class="line"><span class="selector-tag">h2</span>: count= <span class="number">1</span></div><div class="line"><span class="selector-tag">h1</span>: count= <span class="number">5</span></div><div class="line"><span class="selector-tag">h1</span>: count= <span class="number">4</span></div><div class="line"><span class="selector-tag">h1</span>: count= <span class="number">3</span></div><div class="line"><span class="selector-tag">h1</span>: count= <span class="number">2</span></div><div class="line"><span class="selector-tag">h1</span>: count= <span class="number">1</span></div><div class="line"><span class="selector-tag">h3</span>: count= <span class="number">5</span></div><div class="line"><span class="selector-tag">h3</span>: count= <span class="number">4</span></div><div class="line"><span class="selector-tag">h3</span>: count= <span class="number">3</span></div><div class="line"><span class="selector-tag">h3</span>: count= <span class="number">2</span></div><div class="line"><span class="selector-tag">h3</span>: count= <span class="number">1</span></div></pre></td></tr></table></figure>
<h1 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a>实现Runnable接口</h1><p>代码大致框架如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line">	属性<span class="number">1</span>；</div><div class="line">	属性<span class="number">2</span>；</div><div class="line">	…</div><div class="line">  	方法<span class="number">1</span>;</div><div class="line">	方法<span class="number">2</span>；</div><div class="line">	…</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="comment">// other code…</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个小例子，实现资源共享：三个卖票窗口，一起来卖5张票。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">实现Runnable接口比继承Thread类所具有的优势：</div><div class="line">1）：适合多个【相同】的程序代码的线程去处理【同一】个资源</div><div class="line">2）：可以跨过java中的单继承的限制，接口可以多实现</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">5</span>; <span class="comment">// 5张票</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">while</span>(ticket&gt;<span class="number">0</span>)&#123;</div><div class="line">			<span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</div><div class="line">				<span class="keyword">if</span>(ticket&gt;<span class="number">0</span>)&#123;</div><div class="line">					String nameString = Thread.currentThread().getName();</div><div class="line">					System.out.println(name + <span class="string">"正在卖票"</span> + <span class="keyword">this</span>.ticket--);</div><div class="line">					<span class="keyword">try</span> &#123;</div><div class="line">						Thread.sleep((<span class="keyword">int</span>) Math.random() * <span class="number">10</span>);</div><div class="line">					&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">						e.printStackTrace();</div><div class="line">					&#125; </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		TestRunnable t = <span class="keyword">new</span> TestRunnable();</div><div class="line">		<span class="keyword">new</span> Thread(t, <span class="string">"1号窗口"</span>).start();</div><div class="line">		<span class="keyword">new</span> Thread(t, <span class="string">"2号窗口"</span>).start();</div><div class="line">		<span class="keyword">new</span> Thread(t, <span class="string">"3号窗口"</span>).start();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>某次的运行结果：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span>号窗口正在卖票<span class="number">5</span></div><div class="line"><span class="number">3</span>号窗口正在卖票<span class="number">4</span></div><div class="line"><span class="number">2</span>号窗口正在卖票<span class="number">3</span></div><div class="line"><span class="number">2</span>号窗口正在卖票<span class="number">2</span></div><div class="line"><span class="number">3</span>号窗口正在卖票<span class="number">1</span></div></pre></td></tr></table></figure>
<h1 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h1><h2 id="Callable和Runnable的不同"><a href="#Callable和Runnable的不同" class="headerlink" title="Callable和Runnable的不同"></a>Callable和Runnable的不同</h2><p>Callable是类似于Runnable的接口，实现Callable接口的类和实现Runnable接口的类都是可被其它线程执行的任务 。Callable和Runnable有几点不同： </p>
<ul>
<li>Callable规定的方法是call()，而Runnable规定的方法是run() </li>
<li>call()方法可抛出异常，而run()方法不能抛出异常 </li>
<li>Callable的任务执行后可返回值，运行Callable任务可得到一个Future对象，而Runnable的任务无返回值。Future表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过Future对象可了解任务执行情况，可取消任务的执行，还可获取任务执行的结果。 </li>
</ul>
<h2 id="使用思路"><a href="#使用思路" class="headerlink" title="使用思路"></a>使用思路</h2><h3 id="通过FutureTask对象"><a href="#通过FutureTask对象" class="headerlink" title="通过FutureTask对象"></a>通过FutureTask对象</h3><p>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</p>
<p>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</p>
<p>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> i;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		TestCallable tCallable = <span class="keyword">new</span> TestCallable();</div><div class="line">		FutureTask&lt;Integer&gt; fTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(tCallable);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" 的循环变量i的值"</span> + i);</div><div class="line">			<span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</div><div class="line">				<span class="keyword">new</span> Thread(fTask, <span class="string">"有返回值的线程"</span>).start();</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				System.out.println(<span class="string">"有返回值的线程的返回值："</span> + fTask.get());</div><div class="line">			&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">				e.printStackTrace();</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>某次运行结果：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">main 的循环变量i的值<span class="number">0</span></div><div class="line">main 的循环变量i的值<span class="number">1</span></div><div class="line">main 的循环变量i的值<span class="number">2</span></div><div class="line">main 的循环变量i的值<span class="number">3</span></div><div class="line">main 的循环变量i的值<span class="number">4</span></div><div class="line">main 的循环变量i的值<span class="number">5</span></div><div class="line">main 的循环变量i的值<span class="number">6</span></div><div class="line">有返回值的线程 <span class="number">0</span></div><div class="line">main 的循环变量i的值<span class="number">7</span></div><div class="line">有返回值的线程 <span class="number">1</span></div><div class="line">有返回值的线程 <span class="number">2</span></div><div class="line">有返回值的线程 <span class="number">3</span></div><div class="line">有返回值的线程 <span class="number">4</span></div><div class="line">有返回值的线程 <span class="number">5</span></div><div class="line">有返回值的线程 <span class="number">6</span></div><div class="line">有返回值的线程 <span class="number">7</span></div><div class="line">有返回值的线程 <span class="number">8</span></div><div class="line">有返回值的线程 <span class="number">9</span></div><div class="line">有返回值的线程的返回值：<span class="number">10</span></div></pre></td></tr></table></figure>
<h3 id="通过Executor"><a href="#通过Executor" class="headerlink" title="通过Executor"></a>通过Executor</h3><p>Executor框架是Java5中引入的，其内部使用了线程池机制，它在java.util.cocurrent 包下，通过该框架来控制线程的启动、执行和关闭，可以简化并发编程的操作。因此，在Java 5之后，通过Executor来启动线程比使用Thread的start方法更好。参考：<a href="http://blog.csdn.net/ns_code/article/details/17465497" target="_blank" rel="external">Executor框架与线程池</a></p>
<p>创建：Callable实现类 +重写call </p>
<p>借助ExecutorService：执行调度服务ExecutorService，获取Future对象 </p>
<p>ExecutorService ser = Executors.newFixedThreadPool(2);<br>Future result = ser.submit(new CallableImpl())  (submit有返回值，execute无返回值)</p>
<p>获取值：result.get() </p>
<p>停止服务：ser.shutdownNow();</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">package</span> thread;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Future;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.flag = flag;</div><div class="line">	&#125;</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span>(flag)&#123;</div><div class="line">			i++;</div><div class="line">			System.out.println(Thread.currentThread().getName() + <span class="string">" "</span> + i);</div><div class="line">			Thread.yield();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> i;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;</div><div class="line">		TestCallable tCallable1 = <span class="keyword">new</span> TestCallable();</div><div class="line">		TestCallable tCallable2 = <span class="keyword">new</span> TestCallable();</div><div class="line">		</div><div class="line">		ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">3</span>);</div><div class="line">		Future&lt;Integer&gt; result1 = executorService.submit(tCallable1);</div><div class="line">		Future&lt;Integer&gt; result2 = executorService.submit(tCallable1);</div><div class="line">		</div><div class="line">		Thread.sleep(<span class="number">500</span>);</div><div class="line">		tCallable1.setFlag(<span class="keyword">false</span>);</div><div class="line">		tCallable2.setFlag(<span class="keyword">false</span>);</div><div class="line">		</div><div class="line">		System.out.println(<span class="string">"tCallable1: "</span>+result1.get());</div><div class="line">		System.out.println(<span class="string">"tCallable2: "</span>+result2.get());	</div><div class="line">		executorService.shutdownNow();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>某次运行的部分结果：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><div class="line">......</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span> 12215</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span> 12216</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14854</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14855</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14856</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14857</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14858</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14859</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14860</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14861</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14862</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14863</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14864</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14865</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14866</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14867</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14868</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-2</span> 14869</div><div class="line">pool<span class="string">-1</span>-thread<span class="string">-1</span> 12217</div><div class="line">tCallable1: 12217</div><div class="line">tCallable2: 14869</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[单例模式（一）]]></title>
      <url>http://yoursite.com/2017/02/18/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<p><img src="/img/designPattern_sigleten.jpg" width="900" height="600" alt="designPattern_sigleten" align="center"><br>单例模式是最简单最常见的设计模式之一。单例模式的学习教程一般都会提到饿汉式、懒汉式，其中体现了单例模式最要关心的两个问题：对象创建的次数以及何时被创建。 本文会着重总结如上两类实现方式。</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>单例模式，即该类的对象只允许一个实例存在，提供全局的访问。既然只允许进行一次实例化，那么比较容易想到的实现方式就是将构造函数设为私有，然后类内创建一个对象，并对外提供一个接口用于使用者的获取。但由于多线程以及资源、效率等方面的考虑，衍生出多种实现方式。</p>
<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p>乍一听可能觉得单例模式局限性太大，用处有限，其实在实际的应用场景有很多：</p>
<ol>
<li><p>工具类对象，如应用程序的日志应用，一般都何用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只能有一个实例去操作，否则内容不好追加。如log4j日志系统。又比如windows的任务管理器，回收站。</p>
</li>
<li><p>Web应用的配置对象的读取，一般也应用单例模式，这个是由于配置文件是共享的资源。</p>
</li>
<li><p>需要频繁创建销毁的对象，或创建对象时耗时过多或耗费资源过多，但又经常用到的对象。数据库连接池的设计一般就是采用单例模式，因为数据库连接是一种数据库资源，数据库软件系统中使用数据库连接池，主要是节省打开或者关闭数据库连接所引起的效率损耗，这种效率上的损耗还是非常昂贵的。</p>
</li>
<li><p>多线程的线程池的设计一般也是采用单例模式，这是由于线程池要方便对池中的线程进行控制。</p>
</li>
<li><p>spring中的bean默认也是单例的。</p>
</li>
<li><p>……（写的有些乱，不过应该还有很多）</p>
<p>​</p>
</li>
</ol>
<h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><p>所谓的饿汉式、懒汉式，我觉得应该是按照是否实现了延迟加载（lazy load）来区分的。最好的情况是即实现了lazy load，保证了线程安全，同时又能在性能（如运行时间）上有一定的保证。</p>
<h2 id="1-饿汉式（不保证线程安全）"><a href="#1-饿汉式（不保证线程安全）" class="headerlink" title="1.饿汉式（不保证线程安全）"></a>1.饿汉式（不保证线程安全）</h2><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">genInstance</span><span class="params">()</span></span>&#123;</div><div class="line">    	<span class="keyword">return</span> INSTANCE;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。但如果从始至终从未使用过这个实例，则会造成内存的浪费。</p>
<h2 id="2-懒汉式"><a href="#2-懒汉式" class="headerlink" title="2.懒汉式"></a>2.懒汉式</h2><h3 id="版本一：基本版本（不保证线程安全）"><a href="#版本一：基本版本（不保证线程安全）" class="headerlink" title="版本一：基本版本（不保证线程安全）"></a>版本一：基本版本（不保证线程安全）</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">genInstance</span><span class="params">()</span></span>&#123;</div><div class="line">      	<span class="keyword">if</span>(INSTANCE==<span class="keyword">null</span>)&#123;</div><div class="line">          INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">      	&#125;</div><div class="line">    	<span class="keyword">return</span> INSTANCE;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现了Lazy Load，即第一次使用时才进行实例化，但仅能在单线程程序中使用，多线程无法保证单例。如果在创建实例对象前，两个线程都通过了if的判断，则会new出两个对象。</p>
<h3 id="版本二：synchronized同步方法（保证线程安全，不推荐用）"><a href="#版本二：synchronized同步方法（保证线程安全，不推荐用）" class="headerlink" title="版本二：synchronized同步方法（保证线程安全，不推荐用）"></a>版本二：synchronized同步方法（保证线程安全，不推荐用）</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">genInstance</span><span class="params">()</span></span>&#123;</div><div class="line">      	<span class="keyword">if</span>(INSTANCE==<span class="keyword">null</span>)&#123;</div><div class="line">          INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">      	&#125;</div><div class="line">    	<span class="keyword">return</span> INSTANCE;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现了Lazy Load，且能保证线程安全。但是这里有个很大（至少耗时比例上很大）的性能问题。除了第一次调用时是执行了Singleton的构造函数之外，以后的每一次调用都是直接返回instance对象。返回对象这个操作耗时是很小的，绝大部分的耗时都用在synchronized修饰符的同步准备上，因此从性能上说很不划算。</p>
<p>(synchronized不仅实现了实现线程间的互斥，还能保证内存的可见性：<a href="http://www.jianshu.com/p/977d27852826" target="_blank" rel="external">由Synchronized的内存可见性说起</a>)</p>
<h3 id="版本三：synchronized同步块-不保证线程安全，无法使用，用于比较"><a href="#版本三：synchronized同步块-不保证线程安全，无法使用，用于比较" class="headerlink" title="版本三：synchronized同步块(不保证线程安全，无法使用，用于比较)"></a>版本三：synchronized同步块(不保证线程安全，无法使用，用于比较)</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton INSTANCE = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">genInstance</span><span class="params">()</span></span>&#123;</div><div class="line">      	<span class="keyword">if</span>(INSTANCE==<span class="keyword">null</span>)&#123;</div><div class="line">        	<span class="keyword">synchronized</span>(Singleton.class)&#123;</div><div class="line">            	INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">            &#125;</div><div class="line">      	&#125;</div><div class="line">    	<span class="keyword">return</span> INSTANCE;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于上一个版本同步效率太低，所以摒弃同步方法，改为在同步代码块内完成实例化。但是这种同步并不能保证线程安全。与版本一的情形一致，假如一个线程进入了if判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例对象。</p>
<h3 id="版本四：双检锁（保证线程安全，推荐）"><a href="#版本四：双检锁（保证线程安全，推荐）" class="headerlink" title="版本四：双检锁（保证线程安全，推荐）"></a>版本四：双检锁（保证线程安全，推荐）</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton INSTANCE = <span class="keyword">null</span>;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">  	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">genInstance</span><span class="params">()</span></span>&#123;</div><div class="line">      	<span class="keyword">if</span>(INSTANCE==<span class="keyword">null</span>)&#123;</div><div class="line">        	<span class="keyword">synchronized</span>(Singleton.class)&#123;</div><div class="line">				<span class="keyword">if</span>(INSTANCE==<span class="keyword">null</span>)&#123;</div><div class="line">                  	 INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">      	&#125;</div><div class="line">    	<span class="keyword">return</span> INSTANCE;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>双检锁（DCL，double check lock）即双重if检查，同时在使用synchronized代码块的同时，还要将INSTANCE的定义设为volatile类型。</p>
<p>volatile（java5及以后版本）可以保证多线程下变量的可见性：</p>
<p>读volatile：每当子线程某一语句要用到volatile变量时，都会从主线程重新拷贝一份，这样就保证子线程的会跟主线程的一致。</p>
<p>写volatile: 每当子线程某一语句要写volatile变量时，都会在读完后同步到主线程去，这样就保证主线程的变量及时更新。</p>
<p>对于双检锁的具体论述，可以参考<a href="http://www.cnblogs.com/damonhuang/p/5431866.html" target="_blank" rel="external">单例模式中用volatile和synchronized来满足双重检查锁机制</a></p>
<h3 id="版本五：内部静态类（保证线程安全，推荐）"><a href="#版本五：内部静态类（保证线程安全，推荐）" class="headerlink" title="版本五：内部静态类（保证线程安全，推荐）"></a>版本五：内部静态类（保证线程安全，推荐）</h3><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInner</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SingletonInner.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内部静态类SingletonInner并不会随着Singleton类的装载而装载，要在有SingletonInner的引用了以后才会装载到内存的。所以在第一次调用getInstance()之前，SingletonInner是没有被装载进来的，只有在第一次调用了getInstance()之后，里面调用了内部静态类的静态方法，产生了对SingletonInner的引用，内部静态类才会真正装载。从而产生实例对象，这也就达到了Lazy load的目的。</p>
<p>而类的静态属性只会在第一次加载类的时候初始化，而且在类装载时，别的线程是无法进入的。所以在这里，JVM帮助我们保证了线程的安全性。</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>至于枚举实现、反射、序列化等相关问题，将在下一部分进行总结。</p>
<p>参考（看了很多，主要是以下两个）：</p>
<p><a href="https://tianweili.github.io/2015/03/02/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%85%AB%E7%A7%8D%E5%86%99%E6%B3%95%E6%AF%94%E8%BE%83/" target="_blank" rel="external">单例模式的八种写法比较</a></p>
<p><a href="http://blog.csdn.net/a_long_/article/details/51141306" target="_blank" rel="external">单例模式的八种写法比较、枚举实现的好处、静态内部类实现单例原理</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[scrapy:爬取北邮人论坛所有帖的基本信息及正文]]></title>
      <url>http://yoursite.com/2017/01/31/scrapy%E7%88%AC%E5%8F%96%E5%8C%97%E9%82%AE%E4%BA%BA%E8%AE%BA%E5%9D%9B%E6%89%80%E6%9C%89%E5%B8%96%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BF%A1%E6%81%AF%E5%8F%8A%E6%AD%A3%E6%96%87/</url>
      <content type="html"><![CDATA[<p><img src="/img/scrapy1.jpg" width="900" height="600" alt="scrapy1" align="center"><br>参考代码来自于<a href="https://github.com/buptbill220/bbsspider" target="_blank" rel="external">这里</a>，算是二次加工吧。但我其实基本上重写了所有代码，item的定义，spider的逻辑，pipline的数据处理存储等，不过论坛信息爬取的思路分析，模拟登陆及cookie传递都是受原始代码的启发而来，感谢原作者buptbill200。在腾讯的云服务器上跑过几次，基本功能能跑通，但还有不完善之处，比如帖子的主体信息处理与存储部分。<br><a id="more"></a></p>
<h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>爬取<a href="https://bbs.byr.cn" title="北邮人论坛" target="_blank" rel="external">北邮人论坛</a>十个主要板块的板块信息，包括子版块信息，板块的总帖数。针对每一个板块，爬取板块内的所有帖子，包括作者，上传时间，回帖数等等。并获取帖子的主体内容。以上信息均存储与Mysql中。</p>
<h1 id="环境与工具"><a href="#环境与工具" class="headerlink" title="环境与工具"></a>环境与工具</h1><ul>
<li>windows 10 64位 专业版</li>
<li>java 版本 1.8.0_111</li>
<li>Mysql 版本 5.7</li>
<li>python 版本 2.7.12（anaconda4.2 64位）</li>
<li>scrapy</li>
<li>re</li>
<li>MySQLdb</li>
<li>functools</li>
</ul>
<h1 id="scrapy基本原理"><a href="#scrapy基本原理" class="headerlink" title="scrapy基本原理"></a>scrapy基本原理</h1><p>scrapy有详细的使用文档，也有人做了翻译（<a href="http://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html" title="Scrapy中文文档" target="_blank" rel="external">中文版</a>版本较低），且原理讲解中穿插有相当多的代码实例，有时间的话推荐仔细看下。以下简要介绍几个关键组件及其作用。</p>
<p><img src="/img/scrapy-framework.png" width="900" height="600" alt="scrapy-framework" align="center"></p>
<h2 id="关键组件"><a href="#关键组件" class="headerlink" title="关键组件"></a>关键组件</h2><h3 id="Scrapy-Engine"><a href="#Scrapy-Engine" class="headerlink" title="Scrapy Engine"></a>Scrapy Engine</h3><p>Scrapy引擎是用来控制整个系统的数据处理流程，并进行事务处理的触发。更多的详细内容可以看下面的数据处理流程。</p>
<h3 id="Scheduler"><a href="#Scheduler" class="headerlink" title="Scheduler"></a>Scheduler</h3><p>调度程序从Scrapy引擎接受请求并排序列入队列，并在Scrapy引擎发出请求后返还给他们。</p>
<h3 id="Downloader"><a href="#Downloader" class="headerlink" title="Downloader"></a>Downloader</h3><p>下载器的主要职责是抓取网页并将网页内容返还给 Spiders。</p>
<h3 id="Spiders"><a href="#Spiders" class="headerlink" title="Spiders"></a>Spiders</h3><p>Spiders是由用户自己定义用来解析网页并抓取制定URL返回内容的类，每个Spider都能处理一个域名或一组域名。换句话说就是用来定义特定网站的抓取和解析规则。</p>
<p>Spider的整个抓取流程是这样的：</p>
<p>（1）首先获取第一个URL的初始请求，当请求返回后调取一个回调函数。第一个请求是通过调用start_requests()方法完成的。该方法默认从start_urls中的Url中生成请求，交由回调函数处理。当然也可以自己重写这些函数。</p>
<p>（2）回调函数解析网页响应并返回项目对象item或请求对象request的迭代。即使返回的是request，最终的处理结果也应该是可迭代的item。若是request，这些请求也将包含一个回调，交由下一个回调函数处理。如此循环。这一过程中cookie的传递，item数据的传递，由request中meta的对应参数完成，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">yield</span> scrapy.Request(url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>],<span class="string">'item'</span>:item&#125;, headers=HEADERS, callback=self.parse)</div></pre></td></tr></table></figure>
<p>（3）在回调函数中，解析网站内容使用的是Xpath选择器，并生成解析的数据项，存储于item中。</p>
<p>（4）最后，由pipelines来处理返回的item，可以直接打印输出，存储到csv，json文件中，或存储到mysql中。</p>
<h3 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h3><p>项目管道的主要责任是负责处理从网页中抽取的item，他的主要任务是清晰、验证和存储数据。当页面被蜘蛛解析后，将被发送到项目管道，并经过几 个特定的次序处理数据。每个项目管道的组件都是有一个简单的方法组成的Python类。他们获取了项目并执行他们的方法，同时他们还需要确定的是是否需要 在项目管道中继续执行下一步或是直接丢弃掉不处理。</p>
<p>项目管道通常执行的过程有：</p>
<ol>
<li>清洗HTML数据</li>
<li>验证解析到的数据（检查项目是否包含必要的字段）</li>
<li>检查是否是重复数据（如果重复就删除）</li>
<li>将解析到的数据存储到数据库中</li>
</ol>
<h3 id="Downloader-middlewares（下载器中间件）"><a href="#Downloader-middlewares（下载器中间件）" class="headerlink" title="Downloader middlewares（下载器中间件）"></a>Downloader middlewares（下载器中间件）</h3><p>下载中间件是位于Scrapy引擎和下载器之间的钩子框架，主要是处理Scrapy引擎与下载器之间的请求及响应。它提供了一个自定义的代码的方式 来拓展Scrapy的功能。下载中间器是一个处理请求和响应的钩子框架。他是轻量级的，对Scrapy尽享全局控制的底层的系统。</p>
<h3 id="Spider-middlewares（spider中间件）"><a href="#Spider-middlewares（spider中间件）" class="headerlink" title="Spider middlewares（spider中间件）"></a>Spider middlewares（spider中间件）</h3><p>spider中间件是介于Scrapy引擎和蜘蛛之间的钩子框架，主要工作是处理蜘蛛的响应输入和请求输出。它提供一个自定义代码的方式来拓展Scrapy 的功能。蛛中间件是一个挂接到Scrapy的蜘蛛处理机制的框架，你可以插入自定义的代码来处理发送给蜘蛛的请求和返回蜘蛛获取的响应内容和项目。</p>
<h3 id="Scheduler-middlewares（调度中间件）"><a href="#Scheduler-middlewares（调度中间件）" class="headerlink" title="Scheduler middlewares（调度中间件）"></a>Scheduler middlewares（调度中间件）</h3><p>调度中间件是介于Scrapy引擎和调度之间的中间件，主要工作是处从Scrapy引擎发送到调度的请求和响应。他提供了一个自定义的代码来拓展Scrapy的功能。</p>
<h1 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h1><h2 id="模拟登陆"><a href="#模拟登陆" class="headerlink" title="模拟登陆"></a>模拟登陆</h2><p>为了分析登陆时后台所做的操作，可以先输入错误的登陆信息，观察后台的响应，如果你也用的是chrome，按F12即可调出检测工具。</p>
<p><img src="/img/bbsSpider/1.jpg" width="900" height="600" align="center"></p>
<p>进入Network选项卡，然后输入错误登陆信息，发现有个ajax_login.json文件出现，而Headers中所传入的Form Data的id和passwd就是刚才输入的账号密码。可以确定此文件跟登陆有密切关系。</p>
<p><img src="/img/bbsSpider/2.jpg" width="900" height="900" align="center"></p>
<h2 id="传递cookie"><a href="#传递cookie" class="headerlink" title="传递cookie"></a>传递cookie</h2><p>为了保持登陆，需要传递cookie。与request的值传递类似，cookie的传递也用到了meta，具体见代码。如果想看cookie的传递信息，可在settings中设置COOKIES_DEBIG=True。</p>
<h2 id="板块相关文件与逻辑分析"><a href="#板块相关文件与逻辑分析" class="headerlink" title="板块相关文件与逻辑分析"></a>板块相关文件与逻辑分析</h2><p>既然要爬取所有帖子，首先就要有所有的板块链接。论坛的讨论区共有10个一级板块。</p>
<p><img src="/img/bbsSpider/3.jpg" width="900" height="900" align="center"></p>
<p>当打开第一个板块的“+”，会生成ajax_list.json?……文件（红框所示），打开第二个板块，对应文件的链接的sec为1</p>
<p><img src="/img/bbsSpider/4.jpg" width="900" height="900" align="center"></p>
<p>稍微熟悉些http/https的应该能分析出来，打开一级板块的“+”，后台会向ajax_list.json发起post请求，携带的信息（？后面部分）为uid和root，uid为用户名，root的形式为“sec-X”,X取值为0到9，对应第一到第十个一级板块。当然也可以不这么麻烦，直接构造出10个板块的请求链接，即修改sec-后面的数字。</p>
<p>一级板块有10个，每一个板块下可能还有类似的统领型板块（由几个小版块组成），如[北邮校园]下，[北邮教务处]之下就是具体帖子了，但[社团组织]下还能细分出很多板块。可以理解成我们想看一台电脑上10个文件夹下的所有文件内容，但这些文件下有的打开后就能看到文件，有的则是文件夹嵌套，需要打开很多次才能看到文件。至于判断一个板块否是统领型板块，这个可以通过ajax_list.json中的板块链接进行区分。</p>
<p><img src="/img/bbsSpider/5.jpg" width="900" height="900" align="center"></p>
<h1 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h1><h2 id="新建项目与数据库"><a href="#新建项目与数据库" class="headerlink" title="新建项目与数据库"></a>新建项目与数据库</h2><h3 id="使用scrapy-shell创建项目及其他常用命令"><a href="#使用scrapy-shell创建项目及其他常用命令" class="headerlink" title="使用scrapy shell创建项目及其他常用命令"></a>使用scrapy shell创建项目及其他常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">scrapy startproject byrbbs   # 创建项目</div><div class="line">scrapy genspider byr_section bbs.byr.cn  #创建一个爬虫，一个项目中可创建多个</div><div class="line">scrapy list #显示当前项目所包括的爬虫</div><div class="line">scrapy crawl byr_section #启动爬虫byr_section</div></pre></td></tr></table></figure>
<p>爬虫写好后，用crawl命令运行，如果你像我一样使用pycharm写的爬虫，不想要再开个shell窗口运行crawl，可以把这条命令写到一个.py文件中：</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><div class="line"><span class="meta"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="meta"># command.py file</span></div><div class="line">import os</div><div class="line"></div><div class="line"><span class="meta">#如果此文件就存于项目目录，可以注释掉下面这行更改工作目录的代码</span></div><div class="line"><span class="meta"># os.chdir(r'C:\Users\chen\PycharmProjects\byrbbs') </span></div><div class="line"></div><div class="line"><span class="meta"># os.system('scrapy crawl byr_section')   # 运行爬虫byr_section</span></div><div class="line"><span class="meta"># os.system('scrapy crawl byr_article -o article_list.xml')  # 运行爬虫byr_section，并将item存到xml文件中（在没写pipline前可以先在本地存储）</span></div><div class="line"></div><div class="line">os.system(<span class="string">'scrapy crawl byr_article'</span>)</div></pre></td></tr></table></figure>
<h3 id="创建数据库表格"><a href="#创建数据库表格" class="headerlink" title="创建数据库表格"></a>创建数据库表格</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CREATE TABLE `section` (</div><div class="line">  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `section_url` varchar(60) NOT NULL,</div><div class="line">  `section_name` varchar(50) NOT NULL,</div><div class="line">  `section_article_total` int(7) NOT NULL,</div><div class="line">  `top_section_name` varchar(50) NOT NULL,</div><div class="line">  `top_section_num` int(2) NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div><div class="line"></div><div class="line"></div><div class="line">create TABLE `articleinfo` (                       </div><div class="line">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,   </div><div class="line">  `section_name` varchar(50) NOT NULL,</div><div class="line">  `article_title` varchar(80) NOT NULL,   </div><div class="line">  `article_url` varchar(80) NOT NULL,</div><div class="line">  `article_createtime` date NOT NULL,</div><div class="line">  `article_comment` int(10) unsigned NOT NULL DEFAULT &apos;0&apos;,</div><div class="line">  `article_author` varchar(50),                                            </div><div class="line">  PRIMARY KEY (`id`)                                                           </div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div><div class="line"></div><div class="line"></div><div class="line">CREATE TABLE `articlebody` (                       </div><div class="line">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,   </div><div class="line">  `article_url` varchar(80) NOT NULL,</div><div class="line">  `article_content` text, </div><div class="line">  PRIMARY KEY (`id`)                                                           </div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure>
<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><h3 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><div class="line">byrbbs/   <span class="comment">#项目根目录</span></div><div class="line">  ├── byrbbs/       <span class="comment">#项目文件夹</span></div><div class="line">        ├── spiders/        <span class="comment">#爬虫程序文件夹</span></div><div class="line">        	 ├── __init__.py        <span class="comment">#</span></div><div class="line">        	 ├── byr_section.py     <span class="comment">#</span></div><div class="line">        	 ├── byr_config.py      <span class="comment">#</span></div><div class="line">        ├── <span class="keyword">item</span>.py         <span class="comment">#  </span></div><div class="line">        ├── middlewares.py  <span class="comment">#  中间件，未作更改，并未使用</span></div><div class="line">        ├── pipelines.py    <span class="comment">#  用于数据处理与存储</span></div><div class="line">        ├── settings.py     <span class="comment">#  项目配置文件，如pipline的启用，LOG的设置等等</span></div><div class="line">  ├── scrapy.cfg    <span class="comment">#自动生成，里面存有settings和deploy的配置</span></div><div class="line">  ├── .gitignore    <span class="comment">#git忽略文件，写明了哪些文件不用同步与上传，如数据文件，.pyc文件</span></div><div class="line">  ├── *****.jpg     <span class="comment">#截图文件，三幅图分别为mysql中三张表的截图</span></div><div class="line">  └── <span class="keyword">command</span>.<span class="title">py</span>    #手动添加的文件，为了项目运行的方便</div></pre></td></tr></table></figure>
<ul>
<li>详细源码:  <a href="https://github.com/ryderchan/byrbbs" target="_blank" rel="external">byrbbs</a></li>
</ul>
<h3 id="关键点分析"><a href="#关键点分析" class="headerlink" title="关键点分析"></a>关键点分析</h3><h4 id="模拟登陆与cookie传递"><a href="#模拟登陆与cookie传递" class="headerlink" title="模拟登陆与cookie传递"></a>模拟登陆与cookie传递</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> [scrapy.FormRequest(<span class="string">"http://bbs.byr.cn/user/ajax_login.json"</span>,</div><div class="line">                                   formdata=LOGIN_FORMDATA,</div><div class="line">                                   meta=&#123;<span class="string">'cookiejar'</span>: <span class="number">1</span>&#125;,</div><div class="line">                                   headers=HEADERS,</div><div class="line">                                   callback=self.logged_in)]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logged_in</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</div><div class="line">            item = ByrSectionItem()</div><div class="line">            num = int(url[<span class="number">-1</span>])</div><div class="line">            item[<span class="string">'top_section_num'</span>] = num + <span class="number">1</span>  <span class="comment"># 使存储的类别号从1开始</span></div><div class="line">            item[<span class="string">'top_section_name'</span>] = self.top_section_name[num]</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>],<span class="string">'item'</span>:item&#125;, headers=HEADERS, callback=self.parse)</div></pre></td></tr></table></figure>
<p>在scrapy文档中也写有这种方式登陆，将登陆数据，headers等信息传给FormRequest。后续cookie的传递与logged_in函数中的方法一致，通过meta中的cookiejar，而值传递通过其中的item。</p>
<h4 id="文章的处理"><a href="#文章的处理" class="headerlink" title="文章的处理"></a>文章的处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 处理列表，翻页问题</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_article_list_pre</span><span class="params">(self, response)</span>:</span></div><div class="line">        page_list_num = response.xpath(<span class="string">'//*[@class="t-pre-bottom"]/div[1]/ul/li[1]/i/text()'</span>).extract()[<span class="number">0</span>]</div><div class="line">        total_num = int(page_list_num)/self.article_per_list+<span class="number">1</span>  <span class="comment">#页数从1到total_num</span></div><div class="line">        first_list = response._get_url()</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,total_num+<span class="number">1</span>):</div><div class="line">            crawl_list_url = first_list+<span class="string">'?p='</span>+str(i)</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(crawl_list_url, meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>],<span class="string">'item'</span>:response.meta[<span class="string">'item'</span>]&#125;, headers=HEADERS,callback=self.parse_article_list)</div><div class="line"></div><div class="line">    <span class="comment"># 处理列表，获取列表上的每条文章信息与文章链接</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_article_list</span><span class="params">(self, response)</span>:</span></div><div class="line">        <span class="comment"># print "parse_article_list "+response._get_url()</span></div><div class="line">        section_name = response.meta[<span class="string">'item'</span>][<span class="string">'section_name'</span>]</div><div class="line">        sel_article = response.xpath(<span class="string">'//*[@class="b-content"]/table/tbody/tr'</span>)</div><div class="line">        article_url = sel_article.xpath(<span class="string">'td[2]/a/@href'</span>).extract()</div><div class="line">        article_title = sel_article.xpath(<span class="string">'td[2]/a/text()'</span>).extract()</div><div class="line">        article_createtime = sel_article.xpath(<span class="string">'td[3]/text()'</span>).extract()</div><div class="line">        article_author = sel_article.xpath(<span class="string">'td[4]/a/text()'</span>).extract()</div><div class="line">        article_comment = sel_article.xpath(<span class="string">'td[5]/text()'</span>).extract()</div><div class="line"></div><div class="line">        <span class="comment"># 处理列表的每一行，即每一篇文章的信息，存入item</span></div><div class="line">        <span class="keyword">for</span> index, url <span class="keyword">in</span> enumerate(article_url):</div><div class="line">            item = ByrArticleItem()</div><div class="line">            item[<span class="string">'section_name'</span>] = section_name</div><div class="line">            item[<span class="string">'article_title'</span>] = article_title[index]</div><div class="line">            item[<span class="string">'article_url'</span>] = response.urljoin(article_url[index])</div><div class="line">            item[<span class="string">'article_createtime'</span>] = article_createtime[index]</div><div class="line">            item[<span class="string">'article_author'</span>] = article_author[index]</div><div class="line">            item[<span class="string">'article_comment'</span>] = article_comment[index]</div><div class="line">            <span class="keyword">yield</span> scrapy.Request(item[<span class="string">'article_url'</span>], meta=&#123;<span class="string">'cookiejar'</span>: response.meta[<span class="string">'cookiejar'</span>],<span class="string">'item'</span>: item&#125;, headers=HEADERS,callback=self.parse_article_content)</div><div class="line"></div><div class="line">    <span class="comment"># 处理文章主体内容</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_article_content</span><span class="params">(self, response)</span>:</span></div><div class="line">        article = response.xpath(<span class="string">'//div[3]/div[1]/table/tr[2]/td[2]/div[1]'</span>).extract()[<span class="number">0</span>]</div><div class="line">        article = re.sub(<span class="string">'&lt;/?(font|div).*?&gt;'</span>, <span class="string">''</span>, article)</div><div class="line">        article = re.sub(<span class="string">'&lt;br&gt;'</span>, <span class="string">'\n'</span>, article)</div><div class="line">        item = response.meta[<span class="string">'item'</span>]</div><div class="line">        item[<span class="string">'article_content'</span>] = article</div><div class="line">        <span class="keyword">yield</span> item</div></pre></td></tr></table></figure>
<h4 id="MySQLdb的使用"><a href="#MySQLdb的使用" class="headerlink" title="MySQLdb的使用"></a>MySQLdb的使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><div class="line">DB_CONFIG = &#123;<span class="string">'host'</span>: <span class="string">'your_mysql_ip'</span>, <span class="string">'user'</span>:<span class="string">'your_mysql_username'</span>, <span class="string">'passwd'</span>:<span class="string">'your_mysql_password'</span>, <span class="string">'db'</span>:<span class="string">'your_database_name'</span>, <span class="string">'port'</span>: <span class="number">3306</span>, <span class="string">'charset'</span>: <span class="string">'utf8'</span>&#125;</div><div class="line">con = MySQLdb.connect(**DB_CONFIG)</div><div class="line">cur = con.cursor()</div><div class="line">sql = <span class="string">'insert into section(section_url,section_name) values(%s,%s)'</span></div><div class="line">values = (item[<span class="string">'section_url'</span>], item[<span class="string">'section_name'</span>])</div><div class="line">cur.execute(sql, values)  <span class="comment"># second parameter must be iterabale</span></div><div class="line">con.commit()</div><div class="line">cur.close()</div><div class="line">con.close()</div></pre></td></tr></table></figure>
<h4 id="使用装饰器，为不同的item指定pipeline"><a href="#使用装饰器，为不同的item指定pipeline" class="headerlink" title="使用装饰器，为不同的item指定pipeline"></a>使用装饰器，为不同的item指定pipeline</h4><p>spider爬取完数据并生成了item，就会传出给pipeline。当有多个爬虫时，就会有多个item，多个pipeline，而所有的item都会按照settings.py文件中设定的顺序依次经过每个pipeline处理。如果你不想让item经过所有的pipeline处理，就需要为item进行指定pipeline操作。这种类似于权限检查的功能可以用装饰器轻松完成。由于我的一个爬虫只对应一类item，所以我的标记是存在了spider上，当然也可以存在item上。</p>
<p>(1) settings.py中启用pipeline</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">ITEM_PIPELINES = &#123;</div><div class="line">    <span class="string">'byrbbs.pipelines.ByrSectionPipeline'</span>: <span class="number">300</span>,</div><div class="line">    <span class="string">'byrbbs.pipelines.ByrArticlePipeline'</span>: <span class="number">400</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>(2) spider中指定此爬虫后续想要使用的pipeline，进行标记。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># byr_section.py file</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByrSectionSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    pipeline = [<span class="string">'ByrSectionPipeline'</span>]</div><div class="line">    <span class="comment"># other code</span></div><div class="line"> </div><div class="line"><span class="comment"># byr_article.py file</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByrArticleSpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    pipeline = [<span class="string">'ByrArticlePipeline'</span>]</div><div class="line">    <span class="comment"># other code</span></div></pre></td></tr></table></figure>
<p>(3) 装饰器，通过spider上的标记完成检测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># pipelines.py file</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_pipline</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="keyword">if</span> self.__class__.__name__ <span class="keyword">in</span> spider.pipeline:</div><div class="line">            <span class="keyword">return</span> func(self, item, spider)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> item</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByrSectionPipeline</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @check_pipline</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># balabala</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ByrArticlePipeline</span><span class="params">(object)</span>:</span></div><div class="line"><span class="meta">    @check_pipline</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></div><div class="line">        <span class="comment"># balabala</span></div></pre></td></tr></table></figure>
<h4 id="LOG的设置"><a href="#LOG的设置" class="headerlink" title="LOG的设置"></a>LOG的设置</h4><p>可以在运行shell指令时添加附加设置，但我更习惯在settings.py中写清楚：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># settings.py file</span></div><div class="line"><span class="comment">#LOG_ENABLED = False  #是否启用LOG，默认启用</span></div><div class="line">LOG_LEVEL = <span class="string">"INFO"</span>    <span class="comment">#LOG等级，由高到低依次为CRITICAL,ERROR,WARNING,INFO,DEBUG，默认为DEBUG</span></div><div class="line">LOG_FILE = <span class="string">"log_file.txt"</span> <span class="comment">#LOG文件，不指定则不生成，LOG信息显示在运行窗口中</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># shell command</div><div class="line">--logfile &quot;log_file.txt&quot;         #日志文件        </div><div class="line">--loglevel &quot;INFO&quot; or -L &quot;INFO&quot;   #日志等级</div><div class="line">--nolog                          #禁用日志</div></pre></td></tr></table></figure>
<p>在代码中添加日志消息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> logging</div><div class="line">logging.warning(<span class="string">"This is a warning"</span>)</div></pre></td></tr></table></figure>
<p>在spider中添加日志消息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(scrapy.Spider)</span>:</span></div><div class="line">    name = <span class="string">'myspider'</span></div><div class="line">    start_urls = [<span class="string">'http://scrapinghub.com'</span>]</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></div><div class="line">        self.logger.info(<span class="string">'Parse function called on %s'</span>, response.url)</div></pre></td></tr></table></figure>
<h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><p>section table</p>
<p><img src="/img/bbsSpider/section.jpg" width="900" height="900" align="center"></p>
<p>articleinfo table</p>
<p><img src="/img/bbsSpider/articleinfo.jpg" width="900" height="900" align="center"></p>
<p>articlebody table</p>
<p><img src="/img/bbsSpider/articlebody.jpg" width="900" height="900" align="center"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo小技巧-首页显示文章摘要及图片]]></title>
      <url>http://yoursite.com/2017/01/26/hexo%E5%B0%8F%E6%8A%80%E5%B7%A7-%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E5%8F%8A%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<p>首页显示摘要，next主题的官方就有给出<a href="http://theme-next.iissnan.com/faqs.html#%E9%A6%96%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E5%BD%95" target="_blank" rel="external">三种方法</a>，本文详细介绍的就是其中一种。并附上个人的markdown文章头部模板。<br><a id="more"></a></p>
<h2 id="next主题官方给的三种生成摘要方式"><a href="#next主题官方给的三种生成摘要方式" class="headerlink" title="next主题官方给的三种生成摘要方式"></a>next主题官方给的三种生成摘要方式</h2><ol>
<li>在文章中使用\<!-- more -->手动进行截断，Hexo 提供的方式(推荐)</li>
<li>在文章的 <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="external">front-matter</a> 中添加 description，并提供文章摘录</li>
<li>自动形成摘要，在主题配置文件中添加，默认截取的长度为 150字符，可以根据需要自行设定：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><div class="line"><span class="attr">auto_excerpt:</span></div><div class="line"><span class="attr">  enable:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  length:</span> <span class="number">150</span></div></pre></td></tr></table></figure>
<h2 id="文章模板"><a href="#文章模板" class="headerlink" title="文章模板"></a>文章模板</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line">---</div><div class="line">title: git的基本使用</div><div class="line">date: 2017-01-24</div><div class="line">categories:</div><div class="line"><span class="bullet">- </span>学习</div><div class="line"><span class="bullet">- </span>git</div><div class="line">tags:</div><div class="line"><span class="section">  - git</span></div><div class="line">---</div><div class="line"></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/img/git.png"</span> <span class="attr">width</span> = <span class="string">"900"</span> <span class="attr">height</span> = <span class="string">"600"</span> <span class="attr">alt</span>=<span class="string">"git"</span> <span class="attr">align</span>=<span class="string">center</span> /&gt;</span></span></div><div class="line">摘要内容......</div><div class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[hexo问题-hexo s本地测试失败，但hexo d部署正常]]></title>
      <url>http://yoursite.com/2017/01/26/hexo%E9%97%AE%E9%A2%98-hexo%20s%E6%9C%AC%E5%9C%B0%E6%B5%8B%E8%AF%95%E5%A4%B1%E8%B4%A5%EF%BC%8C%E4%BD%86hexo%20d%E9%83%A8%E7%BD%B2%E6%AD%A3%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>问题描述：hexo s ，hexo d运行正常，能通过username.github.io查看内容，但在浏览器中无法通过http: //localhost:4000/访问本地服务，显示“404”。<br><a id="more"></a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hexo s</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>
<p>问题原因：hexo本地测试默认使用的4000端口被占用，可通过“netstat -an|findstr 4000”命令判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ netstat -an|findstr 4000</div><div class="line">  TCP    127.0.0.1:4000         0.0.0.0:0              LISTENING</div><div class="line">  TCP    127.0.0.1:4000         127.0.0.1:49938        ESTABLISHED</div><div class="line">  TCP    127.0.0.1:4000         127.0.0.1:49939        ESTABLISHED</div><div class="line">  TCP    127.0.0.1:4000         127.0.0.1:49940        ESTABLISHED</div><div class="line">  TCP    127.0.0.1:49938        127.0.0.1:4000         ESTABLISHED</div><div class="line">  TCP    127.0.0.1:49939        127.0.0.1:4000         ESTABLISHED</div><div class="line">  TCP    127.0.0.1:49940        127.0.0.1:4000         ESTABLISHED</div></pre></td></tr></table></figure>
<p>解决办法：更改本地服务端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ hexo server -p 5000</div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:5000/. Press Ctrl+C to stop.</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[python装饰器与语法糖@]]></title>
      <url>http://yoursite.com/2017/01/25/python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8E%E8%AF%AD%E6%B3%95%E7%B3%96@/</url>
      <content type="html"><![CDATA[<p><img src="/img/python_decorator.jpg" width="900" height="600" alt="python_decorator" align="center"><br>当想为写好的函数添加新功能而又不想或不方便更改原函数时，就可以使用装饰器来解决，如添加计时器，日志记录，权限认证等，有人将此概括为有切面需求的场景。简单来说，就是为已有的对象添加附加功能，就好像在进行“装饰”。<br><a id="more"></a></p>
<h2 id="最简单的装饰器"><a href="#最简单的装饰器" class="headerlink" title="最简单的装饰器"></a>最简单的装饰器</h2><p>在python中，函数或者说函数名可以作为另一个函数的参数，而装饰器就是以被装饰函数作为参数，对其进行加工修改，并返回修改后的函数名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding=utf-8 -*-</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        func()</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'in foo()'</span></div><div class="line"></div><div class="line">foo = deco(foo)</div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div></pre></td></tr></table></figure>
<p>为了体现出执行过程，加入打印信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="number">3</span></div><div class="line">        func()</div><div class="line">    <span class="keyword">print</span> <span class="number">4</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"><span class="keyword">print</span> <span class="number">5</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'run foo()'</span></div><div class="line"></div><div class="line">foo = deco(foo)</div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div><div class="line"></div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 5</span></div><div class="line"><span class="comment"># 2</span></div><div class="line"><span class="comment"># 4</span></div><div class="line"><span class="comment"># 3</span></div><div class="line"><span class="comment"># run foo()</span></div><div class="line"><span class="comment"># wrapper</span></div></pre></td></tr></table></figure>
<p>在wrapper()函数内，就可以在func()前后添加附加功能，对其进行“装饰”。</p>
<h2 id="加入语法糖"><a href="#加入语法糖" class="headerlink" title="加入语法糖@"></a>加入语法糖@</h2><p>为了进一步简化代码，python加入了@。下面的@deco等价于foo = deco(foo)。其实也没做多少简化，但使用@能明显感觉到加强了代码的可读性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="number">3</span></div><div class="line">        func()</div><div class="line">        </div><div class="line">    <span class="keyword">print</span> <span class="number">4</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"><span class="keyword">print</span> <span class="number">5</span></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'run foo()'</span></div><div class="line"></div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div><div class="line"></div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 5</span></div><div class="line"><span class="comment"># 2</span></div><div class="line"><span class="comment"># 4</span></div><div class="line"><span class="comment"># 3</span></div><div class="line"><span class="comment"># run foo()</span></div><div class="line"><span class="comment"># wrapper</span></div></pre></td></tr></table></figure>
<h2 id="被包装函数是有参、有返回值函数"><a href="#被包装函数是有参、有返回值函数" class="headerlink" title="被包装函数是有参、有返回值函数"></a>被包装函数是有参、有返回值函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(a,b)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'do someting before'</span></div><div class="line">        ret = func(a,b)</div><div class="line">        <span class="keyword">print</span> <span class="string">'do something after'</span></div><div class="line">        <span class="keyword">return</span> ret</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="keyword">print</span> add(<span class="number">2</span>,<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 7</span></div></pre></td></tr></table></figure>
<h2 id="args-kwargs"><a href="#args-kwargs" class="headerlink" title="*args, **kwargs"></a>*args, **kwargs</h2><p>(*args, **kwargs)可接受各种类型的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'do someting before'</span></div><div class="line">        ret = func(*args, **kwargs)</div><div class="line">        <span class="keyword">print</span> <span class="string">'do something after'</span></div><div class="line">        <span class="keyword">return</span> ret</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(x,y,z)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y+z</div><div class="line"></div><div class="line"><span class="keyword">print</span> add1(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="keyword">print</span> add2(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 5</span></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 9</span></div></pre></td></tr></table></figure>
<h2 id="装饰器带普通参数"><a href="#装饰器带普通参数" class="headerlink" title="装饰器带普通参数"></a>装饰器带普通参数</h2><p>与前例相比，需要在外面再加一层包装。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(arg)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deco</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> arg</div><div class="line">            <span class="keyword">print</span> <span class="string">'do someting before'</span></div><div class="line">            ret = func(*args, **kwargs)</div><div class="line">            <span class="keyword">print</span> <span class="string">'do something after'</span></div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> _deco</div><div class="line"></div><div class="line"><span class="meta">@deco('my decorate')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="keyword">print</span> add1(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># my decorate</span></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 5</span></div></pre></td></tr></table></figure>
<h2 id="装饰器带类参数"><a href="#装饰器带类参数" class="headerlink" title="装饰器带类参数"></a>装饰器带类参数</h2><p>与四的使用方式类似。但要注意的是想要在装饰器中使用的类方法需要声明为静态方法（ @staticmethod），因为该类并没有进行实例化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_class</span>:</span></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'static method test() in test_class'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(cls)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deco</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">            cls.test()</div><div class="line">            <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> _deco</div><div class="line"></div><div class="line"><span class="meta">@deco(test_class)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="keyword">print</span> add(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># static method test() in test_class</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># 5</span></div></pre></td></tr></table></figure>
<h2 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(arg)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deco</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> arg</div><div class="line">            <span class="keyword">print</span> <span class="string">'do someting before'</span></div><div class="line">            ret = func(*args, **kwargs)</div><div class="line">            <span class="keyword">print</span> <span class="string">'do something after'</span></div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> _deco</div><div class="line"></div><div class="line"><span class="meta">@deco('decorate1')</span></div><div class="line"><span class="meta">@deco('decorate2')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="keyword">print</span> add1(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># decorate1</span></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># decorate2</span></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 5</span></div></pre></td></tr></table></figure>
<h2 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="@functools.wraps()"></a>@functools.wraps()</h2><p>函数有几个特殊属性比如函数名，在被装饰后，函数名会变成装饰器的包装函数的名字（如下例中的wrapper）。如果你希望使用反射，或者用到了如函数名这样的特殊属性，之前几个例子的装饰器使用方式就会导致意外的结果。functools就可以解决这个问题，将@functools.wraps(func)置于最内层包装函数之前，它能将装饰过的函数的特殊属性保留。</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line"># -*- coding=utf-8 -*-</div><div class="line">def deco(func):</div><div class="line">    def wrapper():</div><div class="line">        func()</div><div class="line">    return wrapper</div><div class="line"></div><div class="line">@deco</div><div class="line">def foo():</div><div class="line">    pass</div><div class="line"></div><div class="line">print "foo.__name__:',foo.__name__</div><div class="line"># output</div><div class="line"># foo.__name__:wrapper   #foo.__name__由于@deco被修改</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line"># -*- coding=utf-8 -*-</div><div class="line">import functools</div><div class="line">def deco(func):</div><div class="line">    @functools.wraps(func)</div><div class="line">    def wrapper():</div><div class="line">        func()</div><div class="line">    return wrapper</div><div class="line"></div><div class="line">@deco</div><div class="line">def foo():</div><div class="line">    pass</div><div class="line"></div><div class="line">print "foo.__name__:',foo.__name__</div><div class="line"># output</div><div class="line"># foo.__name__:foo</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html" target="_blank" rel="external">http://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html</a></p>
<p><a href="http://www.cnblogs.com/evilliu/p/5546877.html" target="_blank" rel="external">http://www.cnblogs.com/evilliu/p/5546877.html</a></p>
<p><a href="http://blog.csdn.net/thy38/article/details/4471421" target="_blank" rel="external">http://blog.csdn.net/thy38/article/details/4471421</a></p>
<p><a href="http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html" target="_blank" rel="external">http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html</a></p>
<p><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="external">https://www.zhihu.com/question/26930016</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git的基本使用]]></title>
      <url>http://yoursite.com/2017/01/24/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="/img/git.png" width="900" height="600" alt="git" align="center"><br>其实一直在断断续续地用git，但一直是用什么查什么，懂的几个命令也只是皮毛。趁着假期有时间，便花了半天时间系统地看了下<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">相关教程、文章</a>，收获很大，做个总结，也方便自己脑子短路时查阅。<br><a id="more"></a></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git init #初始化一个git仓库，即把当前目录变成Git可以管理的仓库，会生成一个.git隐藏文件夹</div></pre></td></tr></table></figure>
<h2 id="信息显示"><a href="#信息显示" class="headerlink" title="信息显示"></a>信息显示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status #查看状态</div><div class="line">git log  #查看提交日志</div><div class="line">git log --graph --pretty=oneline --abbrev=commit #以图，一行，缩写的形式显示日志</div></pre></td></tr></table></figure>
<h2 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add test.txt      # 将工作区文件添加到暂存区，就像购物时添加到购物车</div><div class="line">git add .    #添加所有有修改的文件到暂存区</div><div class="line">git commit -m &quot;test&quot; #将暂存区文件提交到版本库，就像购物时将购物车物品一起结账</div></pre></td></tr></table></figure>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git reset --hard HEAD^^ #回退到当前版本上一个的再上一个版本</div><div class="line">git reset --hard commit_id #通过commit_id回退版本</div><div class="line">git reflog #回退到旧版本后又想到新版本，可用此查看commit_id</div><div class="line">git reset HEAD test.txt #把添加到暂存区的修改撤销</div><div class="line">git checkout -- test.txt #用版本库中的test文件覆盖工作区的test文件</div><div class="line">git rm test.txt #删除本地test文件</div></pre></td></tr></table></figure>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>前提：添加了<a href="https://ryderchan.github.io/2016/10/28/%E5%9C%A8%E6%96%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">SSH Key</a>，并初始化当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#先有本地库，后有远程库，使用关联命令</div><div class="line">git remote add origin git@github.com:ryderchan/learngit.git #关联远程仓库，取名origin</div><div class="line">git push -u origin master #推送本地master分支到远程，第一次带-u，指定默认主机，以后可用git push的简写</div><div class="line">git push origin master #推送本地master分支到远程</div><div class="line"></div><div class="line">#先有远程库，使用克隆命令</div><div class="line">git clone git@github.com:ryderchan/learngit.git #支持git和https，git速度更快</div><div class="line"></div><div class="line">git push #把远程仓库最新的提交抓取下来</div><div class="line">git branch --set-upstream local-branch origin/branch #建立本地分支与远程分支的关联</div></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>常见分支：master（主分支，稳定），dev（开发分支），bug（本地bug修复），feature（新功能分支）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch #显示所有分支</div><div class="line">git branch dev #创建分支</div><div class="line">git checkout dev #切换分支</div><div class="line">git checkout -b dev #创建并切换到dev分支</div><div class="line">git branch -d dev #删除分支</div><div class="line"></div><div class="line">git merge dev #使用fast-forward模式合并dev到当前分支，若有冲突出现，需要修改添加提交。若无冲突，分支历史信息不可见</div><div class="line">git merge --no-ff -m &quot;no-ff&quot; dev #使用no-ff方式合并,分支历史信息可见</div><div class="line"></div><div class="line">git stash #保存现场</div><div class="line">git stash list #查看保存记录</div><div class="line">git stash apply #恢复最近一次保存记录</div><div class="line">git stash drop #删除最近一次保存记录</div><div class="line">git stash pop #恢复最近一次保存记录，并删除其存储记录</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签用于记录一些关键信息，如版本。其实与commit时附带的信息有些功能上的相似与重复。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git tag #显示所有标签</div><div class="line">git tag v1.0 commit_id #给当前分支的commit_id添加标签,不指定id则打在最新提交上</div><div class="line">git tag -a v1.0 -m &quot;version 1.0&quot; commit_id #创建带说明的标签</div><div class="line">git show v1.0 #显示标签信息</div><div class="line">git tag -d v1.0 #删除本地标签</div><div class="line">git push origin v1.0 #推送标签到远程仓库</div><div class="line">git push origin :refs/tags/v1.0 #删除远程仓库标签（需要先用-d删除本地标签）</div></pre></td></tr></table></figure>
<h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2><p>比如java编译生成的文件，比如用于存储账号密码的文件，这类文件往往不需要甚至不能上传。git的.gitignore文件就能达到这个效果，在创建仓库时勾选相关选项，本地修改后，连同其他文件一同推送即可。下面的便是python的.gitignore文件的一部分（自定义忽略xlsx文件）</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><div class="line"><span class="meta"># data file</span></div><div class="line">*.xlsx</div><div class="line"></div><div class="line"><span class="meta"># Byte-compiled / optimized / DLL files</span></div><div class="line">__pycache__/</div><div class="line">*.py[cod]</div><div class="line">*$py.class</div><div class="line"></div><div class="line"><span class="meta"># C extensions</span></div><div class="line">*.so</div><div class="line"></div><div class="line"><span class="meta"># Distribution / packaging</span></div><div class="line">.Python</div><div class="line">env/</div><div class="line">build/</div><div class="line">develop-eggs/xxxxxxxxxx .gitignore文件</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[scrapy安装步骤]]></title>
      <url>http://yoursite.com/2017/01/17/scrapy%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<p><img src="/img/scrapy.jpg" width="900" height="600" alt="scrapy" align="center"><br>scrapy是Python中一款相当知名的爬虫框架，spiders，downloader，pipline各部分组件分工明确，上手简单，使用了一段时间，虽然还有很多高级组件还接触过，但已经臣服于它的简洁优雅。本文主要介绍安装步骤（基于64位的windows10系统）。<br><a id="more"></a></p>
<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p> 此方式比较官方，按部就班，用什么装什么。</p>
<ol>
<li><p>安装官方python编译器</p>
<p>python官网：<a href="https://www.python.org/downloads/windows/" target="_blank" rel="external">https://www.python.org/downloads/windows/</a></p>
<p>装完后可在cmd中敲入python测试</p>
</li>
<li><p>安装c++相关库</p>
<p>exe格式，双击安装，百度搜索：Microsoft Visual C++ Compiler for Python 2.7</p>
</li>
<li><p>安装lxml</p>
<p>在<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>  中，搜索[lxml]，找到[Lxml, a binding for the libxml2 and libxslt libraries]，在这一行下面找合适的lxml版本文件。如我需要在64位系统，2.7的python环境下装lxml，则选择第二个。<br><img src="/img/lxml.jpg" width="900" height="600" alt="lxml" align="center"><br>下载完后后，进到whl文件所在目录，在cmd中用pip安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install lxml-3.6.4-cp27-cp27m-win_amd64.whl</div></pre></td></tr></table></figure>
</li>
<li><p>安装win32api</p>
<p>exe格式，双击安装即可  <a href="https://sourceforge.net/projects/pywin32/files/pywin32/" target="_blank" rel="external">https://sourceforge.net/projects/pywin32/files/pywin32/</a></p>
</li>
<li><p>pip安装scrapy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install scrapy</div></pre></td></tr></table></figure>
<p>pyOpenSSL,zope.interface等相关组件会自动安装。既然如此，为什么不直接运行pip install scrapy呢？因为有些组件基于c++的库，需要提前安装，而且lxml使用pip安装会失败！</p>
</li>
<li><p>安装mysqldb（非必需，不使用mysql，可以不装）</p>
<p>直接使用pip安装会提示类似如下错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">error: command &apos;&quot;C:\Users\qwf\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC\Bin\cl.exe&quot;&apos; failed with exit status 2</div></pre></td></tr></table></figure>
<p>可以参考这篇文章的方法解决 <a href="http://www.crifan.com/python_install_module_mysql_mysqldb/" target="_blank" rel="external">http://www.crifan.com/python_install_module_mysql_mysqldb/</a><br>或者概括为一句话，使用这个个人编译版本双击安装即可：<br><a href="http://arquivos.victorjabur.com/python/modules/MySQL-python-1.2.3.win32-py2.7.exe" target="_blank" rel="external">http://arquivos.victorjabur.com/python/modules/MySQL-python-1.2.3.win32-py2.7.exe</a></p>
</li>
<li><p>测试<br>cmd中运行如下命令，测试scrapy是否可正常使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">scrapy bench</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="方法二（推荐）"><a href="#方法二（推荐）" class="headerlink" title="方法二（推荐）"></a>方法二（推荐）</h1><p>此方法比较省事，一键帮你装好很多相关组件，省去很多麻烦</p>
<ol>
<li><p>安装anaconda<br><img src="/img/anaconda.jpg" width="900" height="600" alt="anaconda" align="center"><br>anaconda官网：<a href="https://www.continuum.io/downloads" target="_blank" rel="external">https://www.continuum.io/downloads</a><br>ananconda是一款为科学计算而做的python开发包，集成了很多计算相关的库，矩阵计算，绘图相关，机器学习相关等等（其中也包括了lxml，win32api），所以体积略大。python官方解释器19M左右，而anaconda接近400M。</p>
</li>
<li><p>pip安装scrapy  同（一）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install scrapy</div></pre></td></tr></table></figure>
</li>
<li><p>安装mysqldb    同（一）<br><a href="http://arquivos.victorjabur.com/python/modules/MySQL-python-1.2.3.win32-py2.7.exe" target="_blank" rel="external">http://arquivos.victorjabur.com/python/modules/MySQL-python-1.2.3.win32-py2.7.exe</a><br>​</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在新电脑上配置环境，更新hexo博客]]></title>
      <url>http://yoursite.com/2016/10/28/%E5%9C%A8%E6%96%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="/img/git_hexo.jpg" width="900" height="600" alt="git_hexo" align="center"><br>重装电脑系统，或者换了个新的电脑，如果想要继续更新博客，就得重新配置相关环境，其实主要是配置git。<br><a id="more"></a></p>
<h2 id="必需文件（换电脑前备份好）"><a href="#必需文件（换电脑前备份好）" class="headerlink" title="必需文件（换电脑前备份好）"></a>必需文件（换电脑前备份好）</h2><ul>
<li>#####.github.io文件夹<br>此文件夹备份时最好先压缩，以保证文件的完整</li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></li>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a></li>
</ul>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="安装node-js-，git"><a href="#安装node-js-，git" class="headerlink" title="安装node.js ，git"></a>安装node.js ，git</h3><p>正常的windows软件安装过程</p>
<h3 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h3><p>（我是在#####.github.io文件夹内进行的安装，但不确定是否为必须）</p>
<pre><code>npm install -g hexo-cli #使用 npm 安装 Hexo
</code></pre><h3 id="hexo框架测试"><a href="#hexo框架测试" class="headerlink" title="hexo框架测试"></a>hexo框架测试</h3><pre><code>hexo clean  #清除缓存
hexo g      #生成静态文件
hexo s      #本地测试
hexo d      #配置上传
</code></pre><h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><h4 id="检查是否已有SSH-Key"><a href="#检查是否已有SSH-Key" class="headerlink" title="检查是否已有SSH Key"></a>检查是否已有SSH Key</h4><pre><code>cd ~/.ssh
</code></pre><p>若有这个目录，则进行备份</p>
<h4 id="生成一个新的SSH"><a href="#生成一个新的SSH" class="headerlink" title="生成一个新的SSH"></a>生成一个新的SSH</h4><pre><code>ssh-keygen -t rsa -C &quot;email&quot;
</code></pre><p>之后直接回车，不用填写东西。之后会让你输入密码。然后就生成一个目录.ssh，里面有两个文件：id_rsa , id_rsa.pub</p>
<h4 id="把这个SSH放到github上"><a href="#把这个SSH放到github上" class="headerlink" title="把这个SSH放到github上"></a>把这个SSH放到github上</h4><p>登录GitHub，然后进入account-setting，把id_rsa.pub的内容复制进去。</p>
<p><img src="/img/add_ssh_key.png" width="900" height="600" alt="添加 ssh key" align="center"></p>
<h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><pre><code>ssh -T git@github.com
</code></pre><h4 id="git个人信息设置"><a href="#git个人信息设置" class="headerlink" title="git个人信息设置"></a>git个人信息设置</h4><pre><code>git config --global user.name &quot;username&quot;
git config --global user.email &quot;email&quot;
</code></pre><h2 id="博客更新"><a href="#博客更新" class="headerlink" title="博客更新"></a>博客更新</h2><pre><code>hexo d      #配置上传
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[递归练习]]></title>
      <url>http://yoursite.com/2016/10/11/%E9%80%92%E5%BD%92%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><img src="/img/recurtion.gif" width="900" height="600" alt="recurtion" align="center"><br>这几道题目难度都不大，甚至有些不用递归会有更简洁的方式实现。但强制自己用递归实现出来，对于学习这种解决问题的方法还是有帮助的。<br>对于判断出能用递归解决的问题，可以先把“归”确定下来，然后再想如何“递”，并把“递”的各种情况考虑清楚、完善，整道题目应该就解决得差不多了。<br><a id="more"></a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="cube-vals-rec"><a href="#cube-vals-rec" class="headerlink" title="cube_vals_rec()"></a>cube_vals_rec()</h3><h4 id="question"><a href="#question" class="headerlink" title="question:"></a>question:</h4><p>wrire a function cube_vals_rec(values) that takes as input a list of numbers called values, and that uses recursion to create and return a list containing the cubes of the numbers in values. For example:</p>
<pre><code>cube_vals_rec([-2,5,4,-3])   # return [-8,125,64,-27]
</code></pre><h4 id="resolution"><a href="#resolution" class="headerlink" title="resolution:"></a>resolution:</h4><pre><code># python 3.5
def cube_vals_rec(values):
if(len(values)==0):
    return []
else :
    return [values[0]**3]+(cube_vals_rec(values[1:]))

if __name__==&quot;__main__&quot;:
    print(cube_vals_rec([-2,5,4,-3]))
</code></pre><h3 id="num-greater"><a href="#num-greater" class="headerlink" title="num_greater()"></a>num_greater()</h3><h4 id="question-1"><a href="#question-1" class="headerlink" title="question:"></a>question:</h4><p>3)write a function called num_greater(threshold, values) that takes as inputs a number threshold and a list of numbers values, and that returns the number of elements of values that are greater than threshold that threshold. For example:</p>
<pre><code>num_greater(5,[1,7,3,5,10])     # return    2
num_greater(10,[1,7,3,5,10])    # return    0
</code></pre><h4 id="resolution-1"><a href="#resolution-1" class="headerlink" title="resolution:"></a>resolution:</h4><pre><code>def num_greater(threshold, values):
if len(values)==0:
   return 0
if values[0]&lt;= (threshold):
   return num_greater(threshold, values[1:])
else:
    return 1+ num_greater(threshold, values[1:])

if __name__==&quot;__main__&quot;:
    print(num_greater(5,[1,7,3,5,10]))
    print(num_greater(10,[1,7,3,5,10]))
</code></pre><h3 id="index-last"><a href="#index-last" class="headerlink" title="index_last()"></a>index_last()</h3><h4 id="question-2"><a href="#question-2" class="headerlink" title="question:"></a>question:</h4><p>4.1)write a function index_last(c, s) that takes as inputs a character c and a string s and that uses recursion to find and return the index of the last occurrence of c(if any) in the string s.If the character c is not found in s,please return -1. For example:</p>
<pre><code>index_last(&apos;a&apos;,&apos;banana&apos;)        # return    5
index_last(&apos;x&apos;,&apos;hello&apos;)         # return    -1
</code></pre><h4 id="resolution-2"><a href="#resolution-2" class="headerlink" title="resolution:"></a>resolution:</h4><pre><code>def index_last(c,s):
if(len(s)==0):
    return -1
elif(c==s[-1]):
    return len(s)-1
else:
    return index_last(c,s[:-1])

if __name__==&quot;__main__&quot;:
    print( index_last(&apos;a&apos;,&apos;banana&apos;))
    print( index_last(&apos;x&apos;,&apos;hello&apos;))
</code></pre><h3 id="lcs"><a href="#lcs" class="headerlink" title="lcs()"></a>lcs()</h3><h4 id="question-3"><a href="#question-3" class="headerlink" title="question:"></a>question:</h4><p>4.3)write a function lcs(s1, s2) that takes two strings s2 and s2 and uses recursion to return the longest common subsequence(LCS) that they share.The LCS is a string whose letters appear in both s1 and s2; these letters must appear in the same order in both s1 and s2,but not necessarily comsecutively. For example:</p>
<pre><code>lcs(&apos;human&apos;, &apos;chimp&apos;)           # return    &apos;hm&apos;
lcs(&apos;abcdefg&apos;,&apos;efghabcd&apos;)       # return    &apos;abcd&apos; (&apos;efgh&apos; would also be fine)
</code></pre><h4 id="resolution-3"><a href="#resolution-3" class="headerlink" title="resolution:"></a>resolution:</h4><pre><code>def lcs(s1,s2):
if(len(s1)==0 or len(s2)==0):
    return &apos;&apos;
elif(s1[0]==s2[0]):
    return s1[0]+lcs(s1[1:],s2[1:])
else:
    result1 = lcs(s1[1:],s2)
    result2 = lcs(s1,s2[1:])
    if (len(result1)&gt;len(result2)):
        return result1
    else:
        return result2

if __name__==&quot;__main__&quot;:
    print( lcs(&apos;human&apos;, &apos;chimp&apos;))
    print( lcs(&apos;gattaca&apos;,&apos;tacgaata&apos;))
    print( lcs(&apos;&apos;,&apos;whew&apos;))
    print( lcs(&apos;abcdefg&apos;,&apos;efghabcd&apos;))
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tkinter实践]]></title>
      <url>http://yoursite.com/2016/10/07/Tkinter%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p><img src="/img/python_logo.jpg" width="900" height="600" alt="python_logo" align="center"><br>Tkinter模块是Python的标准Tk GUI工具包的接口,可以在大多数的Unix平台下使用,同样可以应用在Windows和Macintosh系统里，是一款简单易用的跨平台python库。<br><a id="more"></a></p>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul>
<li>电脑系统：windows10 64bit</li>
<li>python版本： 3.5.2 64bit</li>
<li>IDE： PyCharm Community Edition 2016.2.2</li>
</ul>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><ul>
<li>单词自考自查工具</li>
<li>读取xlsx格式的词典，可进行中译英，英译中的顺序或随机自查，对结果可保存为txt格式的文本</li>
<li>自动记录中-&gt;英错误次数，以日志形式保存</li>
<li>具体见程序的版本信息部分</li>
</ul>
<h2 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h2><ul>
<li>tkinter</li>
<li>os</li>
<li>xlrd</li>
<li>xlwt</li>
<li>xlutils</li>
<li>random</li>
<li>pyinstaller</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/chenxiaoyu2016/tkinter_dict/blob/master/tkinter_dict.py" target="_blank" rel="external">完整python源码</a></p>
<h2 id="可执行文件（-exe）"><a href="#可执行文件（-exe）" class="headerlink" title="可执行文件（.exe）"></a>可执行文件（.exe）</h2><p><a href="https://github.com/chenxiaoyu2016/tkinter_dict/tree/master/build_version4" target="_blank" rel="external">windows下可执行文件</a></p>
<h2 id="部分细节说明"><a href="#部分细节说明" class="headerlink" title="部分细节说明"></a>部分细节说明</h2><h3 id="自定义窗体返回按钮功能"><a href="#自定义窗体返回按钮功能" class="headerlink" title="自定义窗体返回按钮功能"></a>自定义窗体返回按钮功能</h3><pre><code>root=Tk()
root.geometry(&quot;800x500&quot;)
root.protocol(&quot;WM_DELETE_WINDOW&quot;, callback)
</code></pre><p> callback函数功能可自定义，调用root的destroy方法可关闭窗体。</p>
<h3 id="使光标默认聚焦在某一控件"><a href="#使光标默认聚焦在某一控件" class="headerlink" title="使光标默认聚焦在某一控件"></a>使光标默认聚焦在某一控件</h3><pre><code># create Entry module
e = StringVar()
entry = Entry(root, validate=&apos;key&apos;, textvariable=e, width=20,font=(&quot;宋体&quot;, 18, &quot;bold&quot;))
entry.pack()
entry.bind(&apos;&lt;Return&gt;&apos;, rtnkey)
entry.focus_force()
</code></pre><p>很多控件都有focus_force方法，该方法即会将光标默认设在对应控件上。</p>
<h3 id="使滚动条自动滚动到最底部"><a href="#使滚动条自动滚动到最底部" class="headerlink" title="使滚动条自动滚动到最底部"></a>使滚动条自动滚动到最底部</h3><pre><code># create text module
textPad=Text(root,undo=True)
textPad.pack(expand=YES,fill=BOTH)

#create scroll bar
scroll=Scrollbar(textPad)
textPad.config(yscrollcommand=scroll.set)
scroll.config(command=textPad.yview)
scroll.config(cursor=&apos;hand2&apos;)
scroll.pack(side=RIGHT,fill=Y)

textPad.insert(CURRENT,&apos;\n&apos;)
textPad.see(END)
</code></pre><p>关键在最后两行，text组件的插入使用insert方法，示例中在当前位置CURRENT插入了一个换行符，see方法（参数为END）可使text组件处在可见内容的最尾部，即可使滚动条默认处在最底部。<br>如果滚动条没有处在最底部就调用text组件的insert方法，会在界面显示可见的最后一行插入，而不是text组件整体的CURRENT位置插入。</p>
<h3 id="xls-xlsx文件的读-写-改写"><a href="#xls-xlsx文件的读-写-改写" class="headerlink" title="xls/xlsx文件的读/写/改写"></a>xls/xlsx文件的读/写/改写</h3><pre><code># read a xls/xlsx file
import xlrd
file = &apos;C:/Users/chenxy/Desktop/tkinter_dict/test_data.xlsx&apos;
raw_data = xlrd.open_workbook(file)
table = raw_data.sheets()[0]
col0 = table.col_values(0)
row0 = table.row_values(0)
</code></pre><p>xlrd的文件读取，对于xls，xlsx都没问题。</p>
<pre><code>#write a new xls file 
import xlwt
file = xlwt.Workbook()
table = file.add_sheet(&apos;sheet1&apos;, cell_overwrite_ok=True)
table.write(0, 0, &apos;[0,0]&apos;)
for i in range(0, 10):
    table.write(0 , i, &apos;[0,&apos;+str(i)+&apos;]&apos;)
file.save(&apos;C:/Users/chenxy/Desktop/tkinter_dict/new_data.xls&apos;)
</code></pre><p>cell_overwrite_ok=True可以使文件在保存之前重写，<br>xlwt只能生成xls文件；生成xlsx文件也不会报错，但无法打开，显示已损坏。可能跟python版本有关，换成低版本也许能表现正常。</p>
<pre><code>#rewrite a xls file existed
import xlutils
file = &apos;C:/Users/chenxy/Desktop/tkinter_dict/test_data.xlsx&apos;
raw_data = xlrd.open_workbook(file)
file_copy = xlutils.copy.copy(raw_data)
table = file_copy.get_sheet(0)
for i in range(0, 10):
    table.write(0 , i, &apos;[0,&apos;+str(i)+&apos;]&apos;)
file_copy.save(&apos;C:/Users/chenxy/Desktop/tkinter_dict/test_data.xlsx&apos;)
</code></pre><p>使用xlutils的copy方法，之后的部分按照xlrd的相似方式写即可。<br>注：xlutils是基于xlrd和xlwt的。</p>
<h3 id="python代码打包成exe文件"><a href="#python代码打包成exe文件" class="headerlink" title="python代码打包成exe文件"></a>python代码打包成exe文件</h3><p> python有很多用于打包的模块，但对于python3.5，目前能正常使用的貌似只有pyinstaller（并且对于32位，64位都支持）。在cmd中，进入到python文件所在目录，然后执行如下代码：</p>
<pre><code>pyinstaller -F -w 文件名.py
</code></pre><p>-F 表示生成单个可执行文件，即将所有依赖文件都集中到一个exe文件中<br>-w 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那要把这个选项删除</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://yoursite.com/baidu_verify_Skzjms5rOj.html</url>
      <content type="html"><![CDATA[Skzjms5rOj]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yoursite.com/google4cb880aa082b939a.html</url>
      <content type="html"><![CDATA[google-site-verification: google4cb880aa082b939a.html]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>http://yoursite.com/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://yoursite.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
