<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[python装饰器与语法糖@]]></title>
      <url>http://yoursite.com/2017/01/26/python%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8E%E8%AF%AD%E6%B3%95%E7%B3%96@/</url>
      <content type="html"><![CDATA[<p><img src="/img/python_decorator.jpg" width="900" height="600" alt="python_decorator" align="center"><br>当想为写好的函数添加新功能而又不想或不方便更改原函数时，就可以使用装饰器来解决，如添加计时器，日志记录，权限认证等，有人将此概括为有切面需求的场景。简单来说，就是为已有的对象添加附加功能，就好像在进行“装饰”。<br><a id="more"></a></p>
<h2 id="最简单的装饰器"><a href="#最简单的装饰器" class="headerlink" title="最简单的装饰器"></a>最简单的装饰器</h2><p>在python中，函数或者说函数名可以作为另一个函数的参数，而装饰器就是以被装饰函数作为参数，对其进行加工修改，并返回修改后的函数名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># -*- coding=utf-8 -*-</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        func()</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'in foo()'</span></div><div class="line"></div><div class="line">foo = deco(foo)</div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div></pre></td></tr></table></figure>
<p>为了体现出执行过程，加入打印信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="number">3</span></div><div class="line">        func()</div><div class="line">    <span class="keyword">print</span> <span class="number">4</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"><span class="keyword">print</span> <span class="number">5</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'run foo()'</span></div><div class="line"></div><div class="line">foo = deco(foo)</div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div><div class="line"></div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 5</span></div><div class="line"><span class="comment"># 2</span></div><div class="line"><span class="comment"># 4</span></div><div class="line"><span class="comment"># 3</span></div><div class="line"><span class="comment"># run foo()</span></div><div class="line"><span class="comment"># wrapper</span></div></pre></td></tr></table></figure>
<p>在wrapper()函数内，就可以在func()前后添加附加功能，对其进行“装饰”。</p>
<h2 id="加入语法糖"><a href="#加入语法糖" class="headerlink" title="加入语法糖@"></a>加入语法糖@</h2><p>为了进一步简化代码，python加入了@。下面的@deco等价于foo = deco(foo)。其实也没做多少简化，但使用@能明显感觉到加强了代码的可读性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="number">1</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="number">2</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="number">3</span></div><div class="line">        func()</div><div class="line">        </div><div class="line">    <span class="keyword">print</span> <span class="number">4</span></div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"><span class="keyword">print</span> <span class="number">5</span></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'run foo()'</span></div><div class="line"></div><div class="line">foo()</div><div class="line"><span class="keyword">print</span> foo.__name__</div><div class="line"></div><div class="line"><span class="comment"># output</span></div><div class="line"><span class="comment"># 1</span></div><div class="line"><span class="comment"># 5</span></div><div class="line"><span class="comment"># 2</span></div><div class="line"><span class="comment"># 4</span></div><div class="line"><span class="comment"># 3</span></div><div class="line"><span class="comment"># run foo()</span></div><div class="line"><span class="comment"># wrapper</span></div></pre></td></tr></table></figure>
<h2 id="被包装函数是有参、有返回值函数"><a href="#被包装函数是有参、有返回值函数" class="headerlink" title="被包装函数是有参、有返回值函数"></a>被包装函数是有参、有返回值函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(a,b)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'do someting before'</span></div><div class="line">        ret = func(a,b)</div><div class="line">        <span class="keyword">print</span> <span class="string">'do something after'</span></div><div class="line">        <span class="keyword">return</span> ret</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="keyword">print</span> add(<span class="number">2</span>,<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 7</span></div></pre></td></tr></table></figure>
<h2 id="args-kwargs"><a href="#args-kwargs" class="headerlink" title="*args, **kwargs"></a>*args, **kwargs</h2><p>(*args, **kwargs)可接受各种类型的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'do someting before'</span></div><div class="line">        ret = func(*args, **kwargs)</div><div class="line">        <span class="keyword">print</span> <span class="string">'do something after'</span></div><div class="line">        <span class="keyword">return</span> ret</div><div class="line">    <span class="keyword">return</span> wrapper</div><div class="line"></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="meta">@deco</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add2</span><span class="params">(x,y,z)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y+z</div><div class="line"></div><div class="line"><span class="keyword">print</span> add1(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"><span class="keyword">print</span> add2(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</div><div class="line"></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 5</span></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 9</span></div></pre></td></tr></table></figure>
<h2 id="装饰器带普通参数"><a href="#装饰器带普通参数" class="headerlink" title="装饰器带普通参数"></a>装饰器带普通参数</h2><p>与前例相比，需要在外面再加一层包装。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(arg)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deco</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> arg</div><div class="line">            <span class="keyword">print</span> <span class="string">'do someting before'</span></div><div class="line">            ret = func(*args, **kwargs)</div><div class="line">            <span class="keyword">print</span> <span class="string">'do something after'</span></div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> _deco</div><div class="line"></div><div class="line"><span class="meta">@deco('my decorate')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="keyword">print</span> add1(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># my decorate</span></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 5</span></div></pre></td></tr></table></figure>
<h2 id="装饰器带类参数"><a href="#装饰器带类参数" class="headerlink" title="装饰器带类参数"></a>装饰器带类参数</h2><p>与四的使用方式类似。但要注意的是想要在装饰器中使用的类方法需要声明为静态方法（ @staticmethod），因为该类并没有进行实例化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">test_class</span>:</span></div><div class="line"><span class="meta">    @staticmethod</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'static method test() in test_class'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(cls)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deco</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">            cls.test()</div><div class="line">            <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> _deco</div><div class="line"></div><div class="line"><span class="meta">@deco(test_class)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="keyword">print</span> add(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># static method test() in test_class</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># 5</span></div></pre></td></tr></table></figure>
<h2 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(arg)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deco</span><span class="params">(func)</span>:</span></div><div class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></div><div class="line">            <span class="keyword">print</span> arg</div><div class="line">            <span class="keyword">print</span> <span class="string">'do someting before'</span></div><div class="line">            ret = func(*args, **kwargs)</div><div class="line">            <span class="keyword">print</span> <span class="string">'do something after'</span></div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        <span class="keyword">return</span> wrapper</div><div class="line">    <span class="keyword">return</span> _deco</div><div class="line"></div><div class="line"><span class="meta">@deco('decorate1')</span></div><div class="line"><span class="meta">@deco('decorate2')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add1</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'running add()'</span></div><div class="line">    <span class="keyword">return</span> x+y</div><div class="line"></div><div class="line"><span class="keyword">print</span> add1(<span class="number">2</span>,<span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># decorate1</span></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># decorate2</span></div><div class="line"><span class="comment"># do someting before</span></div><div class="line"><span class="comment"># running add()</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># do something after</span></div><div class="line"><span class="comment"># 5</span></div></pre></td></tr></table></figure>
<h2 id="functools-wraps"><a href="#functools-wraps" class="headerlink" title="@functools.wraps()"></a>@functools.wraps()</h2><p>函数有几个特殊属性比如函数名，在被装饰后，函数名会变成装饰器的包装函数的名字（如下例中的wrapper）。如果你希望使用反射，或者用到了如函数名这样的特殊属性，之前几个例子的装饰器使用方式就会导致意外的结果。functools就可以解决这个问题，将@functools.wraps(func)置于最内层包装函数之前，它能将装饰过的函数的特殊属性保留。</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line"># -*- coding=utf-8 -*-</div><div class="line">def deco(func):</div><div class="line">    def wrapper():</div><div class="line">        func()</div><div class="line">    return wrapper</div><div class="line"></div><div class="line">@deco</div><div class="line">def foo():</div><div class="line">    pass</div><div class="line"></div><div class="line">print "foo.__name__:',foo.__name__</div><div class="line"># output</div><div class="line"># foo.__name__:wrapper   #foo.__name__由于@deco被修改</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line"># -*- coding=utf-8 -*-</div><div class="line">import functools</div><div class="line">def deco(func):</div><div class="line">    @functools.wraps(func)</div><div class="line">    def wrapper():</div><div class="line">        func()</div><div class="line">    return wrapper</div><div class="line"></div><div class="line">@deco</div><div class="line">def foo():</div><div class="line">    pass</div><div class="line"></div><div class="line">print "foo.__name__:',foo.__name__</div><div class="line"># output</div><div class="line"># foo.__name__:foo</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html" target="_blank" rel="external">http://www.cnblogs.com/rhcad/archive/2011/12/21/2295507.html</a></p>
<p><a href="http://www.cnblogs.com/evilliu/p/5546877.html" target="_blank" rel="external">http://www.cnblogs.com/evilliu/p/5546877.html</a></p>
<p><a href="http://blog.csdn.net/thy38/article/details/4471421" target="_blank" rel="external">http://blog.csdn.net/thy38/article/details/4471421</a></p>
<p><a href="http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html" target="_blank" rel="external">http://www.cnblogs.com/huxi/archive/2011/03/01/1967600.html</a></p>
<p><a href="https://www.zhihu.com/question/26930016" target="_blank" rel="external">https://www.zhihu.com/question/26930016</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git的基本使用]]></title>
      <url>http://yoursite.com/2017/01/24/git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><img src="/img/git.png" width="900" height="600" alt="git" align="center"><br>其实一直在断断续续地用git，但一直是用什么查什么，懂的几个命令也只是皮毛。趁着假期有时间，便花了半天时间系统地看了下<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">相关教程、文章</a>，收获很大，做个总结，也方便自己脑子短路时查阅。<br><a id="more"></a></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git init #初始化一个git仓库，即把当前目录变成Git可以管理的仓库，会生成一个.git隐藏文件夹</div></pre></td></tr></table></figure>
<h2 id="信息显示"><a href="#信息显示" class="headerlink" title="信息显示"></a>信息显示</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git status #查看状态</div><div class="line">git log  #查看提交日志</div><div class="line">git log --graph --pretty=oneline --abbrev=commit #以图，一行，缩写的形式显示日志</div></pre></td></tr></table></figure>
<h2 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git add test.txt      # 将工作区文件添加到暂存区，就像购物时添加到购物车</div><div class="line">git add .    #添加所有有修改的文件到暂存区</div><div class="line">git commit -m &quot;test&quot; #将暂存区文件提交到版本库，就像购物时将购物车物品一起结账</div></pre></td></tr></table></figure>
<h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git reset --hard HEAD^^ #回退到当前版本上一个的再上一个版本</div><div class="line">git reset --hard commit_id #通过commit_id回退版本</div><div class="line">git reflog #回退到旧版本后又想到新版本，可用此查看commit_id</div><div class="line">git reset HEAD test.txt #把添加到暂存区的修改撤销</div><div class="line">git checkout -- test.txt #用版本库中的test文件覆盖工作区的test文件</div><div class="line">git rm test.txt #删除本地test文件</div></pre></td></tr></table></figure>
<h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p>前提：添加了<a href="https://ryderchan.github.io/2016/10/28/%E5%9C%A8%E6%96%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">SSH Key</a>，并初始化当前目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#先有本地库，后有远程库，使用关联命令</div><div class="line">git remote add origin git@github.com:ryderchan/learngit.git #关联远程仓库，取名origin</div><div class="line">git push -u origin master #推送本地master分支到远程，第一次带-u，指定默认主机，以后可用git push的简写</div><div class="line">git push origin master #推送本地master分支到远程</div><div class="line"></div><div class="line">#先有远程库，使用克隆命令</div><div class="line">git clone git@github.com:ryderchan/learngit.git #支持git和https，git速度更快</div><div class="line"></div><div class="line">git push #把远程仓库最新的提交抓取下来</div><div class="line">git branch --set-upstream local-branch origin/branch #建立本地分支与远程分支的关联</div></pre></td></tr></table></figure>
<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>常见分支：master（主分支，稳定），dev（开发分支），bug（本地bug修复），feature（新功能分支）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git branch #显示所有分支</div><div class="line">git branch dev #创建分支</div><div class="line">git checkout dev #切换分支</div><div class="line">git checkout -b dev #创建并切换到dev分支</div><div class="line">git branch -d dev #删除分支</div><div class="line"></div><div class="line">git merge dev #使用fast-forward模式合并dev到当前分支，若有冲突出现，需要修改添加提交。若无冲突，分支历史信息不可见</div><div class="line">git merge --no-ff -m &quot;no-ff&quot; dev #使用no-ff方式合并,分支历史信息可见</div><div class="line"></div><div class="line">git stash #保存现场</div><div class="line">git stash list #查看保存记录</div><div class="line">git stash apply #恢复最近一次保存记录</div><div class="line">git stash drop #删除最近一次保存记录</div><div class="line">git stash pop #恢复最近一次保存记录，并删除其存储记录</div></pre></td></tr></table></figure>
<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>标签用于记录一些关键信息，如版本。其实与commit时附带的信息有些功能上的相似与重复。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git tag #显示所有标签</div><div class="line">git tag v1.0 commit_id #给当前分支的commit_id添加标签,不指定id则打在最新提交上</div><div class="line">git tag -a v1.0 -m &quot;version 1.0&quot; commit_id #创建带说明的标签</div><div class="line">git show v1.0 #显示标签信息</div><div class="line">git tag -d v1.0 #删除本地标签</div><div class="line">git push origin v1.0 #推送标签到远程仓库</div><div class="line">git push origin :refs/tags/v1.0 #删除远程仓库标签（需要先用-d删除本地标签）</div></pre></td></tr></table></figure>
<h2 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h2><p>比如java编译生成的文件，比如用于存储账号密码的文件，这类文件往往不需要甚至不能上传。git的.gitignore文件就能达到这个效果，在创建仓库时勾选相关选项，本地修改后，连同其他文件一同推送即可。下面的便是python的.gitignore文件的一部分（自定义忽略xlsx文件）</p>
<figure class="highlight vala"><table><tr><td class="code"><pre><div class="line"><span class="meta"># data file</span></div><div class="line">*.xlsx</div><div class="line"></div><div class="line"><span class="meta"># Byte-compiled / optimized / DLL files</span></div><div class="line">__pycache__/</div><div class="line">*.py[cod]</div><div class="line">*$py.class</div><div class="line"></div><div class="line"><span class="meta"># C extensions</span></div><div class="line">*.so</div><div class="line"></div><div class="line"><span class="meta"># Distribution / packaging</span></div><div class="line">.Python</div><div class="line">env/</div><div class="line">build/</div><div class="line">develop-eggs/xxxxxxxxxx .gitignore文件</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[scrapy安装步骤]]></title>
      <url>http://yoursite.com/2017/01/17/scrapy%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4/</url>
      <content type="html"><![CDATA[<p><img src="/img/scrapy.jpg" width="900" height="600" alt="scrapy" align="center"><br>scrapy是Python中一款相当知名的爬虫框架，spiders，downloader，pipline各部分组件分工明确，上手简单，使用了一段时间，虽然还有很多高级组件还接触过，但已经臣服于它的简洁优雅。本文主要介绍安装步骤（基于64位的windows10系统）。<br><a id="more"></a></p>
<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p> 此方式比较官方，按部就班，用什么装什么。</p>
<ol>
<li><p>安装官方python编译器</p>
<p>python官网：<a href="https://www.python.org/downloads/windows/" target="_blank" rel="external">https://www.python.org/downloads/windows/</a></p>
<p>装完后可在cmd中敲入python测试</p>
</li>
<li><p>安装c++相关库</p>
<p>exe格式，双击安装，百度搜索：Microsoft Visual C++ Compiler for Python 2.7</p>
</li>
<li><p>安装lxml</p>
<p>在<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a>  中，搜索[lxml]，找到[Lxml, a binding for the libxml2 and libxslt libraries]，在这一行下面找合适的lxml版本文件。如我需要在64位系统，2.7的python环境下装lxml，则选择第二个。<br><img src="/img/lxml.jpg" width="900" height="600" alt="lxml" align="center"><br>下载完后后，进到whl文件所在目录，在cmd中用pip安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install lxml-3.6.4-cp27-cp27m-win_amd64.whl</div></pre></td></tr></table></figure>
</li>
<li><p>安装win32api</p>
<p>exe格式，双击安装即可  <a href="https://sourceforge.net/projects/pywin32/files/pywin32/" target="_blank" rel="external">https://sourceforge.net/projects/pywin32/files/pywin32/</a></p>
</li>
<li><p>pip安装scrapy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install scrapy</div></pre></td></tr></table></figure>
<p>pyOpenSSL,zope.interface等相关组件会自动安装。既然如此，为什么不直接运行pip install scrapy呢？因为有些组件基于c++的库，需要提前安装，而且lxml使用pip安装会失败！</p>
</li>
<li><p>安装mysqldb（非必需，不使用mysql，可以不装）</p>
<p>直接使用pip安装会提示类似如下错误</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">error: command &apos;&quot;C:\Users\qwf\AppData\Local\Programs\Common\Microsoft\Visual C++ for Python\9.0\VC\Bin\cl.exe&quot;&apos; failed with exit status 2</div></pre></td></tr></table></figure>
<p>可以参考这篇文章的方法解决 <a href="http://www.crifan.com/python_install_module_mysql_mysqldb/" target="_blank" rel="external">http://www.crifan.com/python_install_module_mysql_mysqldb/</a><br>或者概括为一句话，使用这个个人编译版本双击安装即可：<br><a href="http://arquivos.victorjabur.com/python/modules/MySQL-python-1.2.3.win32-py2.7.exe" target="_blank" rel="external">http://arquivos.victorjabur.com/python/modules/MySQL-python-1.2.3.win32-py2.7.exe</a></p>
</li>
<li><p>测试<br>cmd中运行如下命令，测试scrapy是否可正常使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">scrapy bench</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="方法二（推荐）"><a href="#方法二（推荐）" class="headerlink" title="方法二（推荐）"></a>方法二（推荐）</h1><p>此方法比较省事，一键帮你装好很多相关组件，省去很多麻烦</p>
<ol>
<li><p>安装anaconda<br><img src="/img/anaconda.jpg" width="900" height="600" alt="anaconda" align="center"><br>anaconda官网：<a href="https://www.continuum.io/downloads" target="_blank" rel="external">https://www.continuum.io/downloads</a><br>ananconda是一款为科学计算而做的python开发包，集成了很多计算相关的库，矩阵计算，绘图相关，机器学习相关等等（其中也包括了lxml，win32api），所以体积略大。python官方解释器19M左右，而anaconda接近400M。</p>
</li>
<li><p>pip安装scrapy  同（一）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">pip install scrapy</div></pre></td></tr></table></figure>
</li>
<li><p>安装mysqldb    同（一）<br><a href="http://arquivos.victorjabur.com/python/modules/MySQL-python-1.2.3.win32-py2.7.exe" target="_blank" rel="external">http://arquivos.victorjabur.com/python/modules/MySQL-python-1.2.3.win32-py2.7.exe</a><br>​</p>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在新电脑上配置环境，更新hexo博客]]></title>
      <url>http://yoursite.com/2016/10/28/%E5%9C%A8%E6%96%B0%E7%94%B5%E8%84%91%E4%B8%8A%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E6%9B%B4%E6%96%B0hexo%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<p><img src="/img/git_hexo.jpg" width="900" height="600" alt="git_hexo" align="center"><br>重装电脑系统，或者换了个新的电脑，如果想要继续更新博客，就得重新配置相关环境，其实主要是配置git。<br><a id="more"></a></p>
<h2 id="必需文件（换电脑前备份好）"><a href="#必需文件（换电脑前备份好）" class="headerlink" title="必需文件（换电脑前备份好）"></a>必需文件（换电脑前备份好）</h2><ul>
<li>#####.github.io文件夹<br>此文件夹备份时最好先压缩，以保证文件的完整</li>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">node.js</a></li>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a></li>
</ul>
<h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><h3 id="安装node-js-，git"><a href="#安装node-js-，git" class="headerlink" title="安装node.js ，git"></a>安装node.js ，git</h3><p>正常的windows软件安装过程</p>
<h3 id="安装hexo框架"><a href="#安装hexo框架" class="headerlink" title="安装hexo框架"></a>安装hexo框架</h3><p>（我是在#####.github.io文件夹内进行的安装，但不确定是否为必须）</p>
<pre><code>npm install -g hexo-cli #使用 npm 安装 Hexo
</code></pre><h3 id="hexo框架测试"><a href="#hexo框架测试" class="headerlink" title="hexo框架测试"></a>hexo框架测试</h3><pre><code>hexo clean  #清除缓存
hexo g      #生成静态文件
hexo s      #本地测试
hexo d      #配置上传
</code></pre><h3 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h3><h4 id="检查是否已有SSH-Key"><a href="#检查是否已有SSH-Key" class="headerlink" title="检查是否已有SSH Key"></a>检查是否已有SSH Key</h4><pre><code>cd ~/.ssh
</code></pre><p>若有这个目录，则进行备份</p>
<h4 id="生成一个新的SSH"><a href="#生成一个新的SSH" class="headerlink" title="生成一个新的SSH"></a>生成一个新的SSH</h4><pre><code>ssh-keygen -t rsa -C &quot;email&quot;
</code></pre><p>之后直接回车，不用填写东西。之后会让你输入密码。然后就生成一个目录.ssh，里面有两个文件：id_rsa , id_rsa.pub</p>
<h4 id="把这个SSH放到github上"><a href="#把这个SSH放到github上" class="headerlink" title="把这个SSH放到github上"></a>把这个SSH放到github上</h4><p>登录GitHub，然后进入account-setting，把id_rsa.pub的内容复制进去。</p>
<p><img src="/img/add_ssh_key.png" width="900" height="600" alt="添加 ssh key" align="center"></p>
<h4 id="连接测试"><a href="#连接测试" class="headerlink" title="连接测试"></a>连接测试</h4><pre><code>ssh -T git@github.com
</code></pre><h4 id="git个人信息设置"><a href="#git个人信息设置" class="headerlink" title="git个人信息设置"></a>git个人信息设置</h4><pre><code>git config --global user.name &quot;username&quot;
git config --global user.email &quot;email&quot;
</code></pre><h2 id="博客更新"><a href="#博客更新" class="headerlink" title="博客更新"></a>博客更新</h2><pre><code>hexo d      #配置上传
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[递归练习]]></title>
      <url>http://yoursite.com/2016/10/11/%E9%80%92%E5%BD%92%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p><img src="/img/recurtion.gif" width="900" height="600" alt="recurtion" align="center"><br>这几道题目难度都不大，甚至有些不用递归会有更简洁的方式实现。但强制自己用递归实现出来，对于学习这种解决问题的方法还是有帮助的。<br>对于判断出能用递归解决的问题，可以先把“归”确定下来，然后再想如何“递”，并把“递”的各种情况考虑清楚、完善，整道题目应该就解决得差不多了。<br><a id="more"></a></p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="cube-vals-rec"><a href="#cube-vals-rec" class="headerlink" title="cube_vals_rec()"></a>cube_vals_rec()</h3><h4 id="question"><a href="#question" class="headerlink" title="question:"></a>question:</h4><p>wrire a function cube_vals_rec(values) that takes as input a list of numbers called values, and that uses recursion to create and return a list containing the cubes of the numbers in values. For example:</p>
<pre><code>cube_vals_rec([-2,5,4,-3])   # return [-8,125,64,-27]
</code></pre><h4 id="resolution"><a href="#resolution" class="headerlink" title="resolution:"></a>resolution:</h4><pre><code># python 3.5
def cube_vals_rec(values):
if(len(values)==0):
    return []
else :
    return [values[0]**3]+(cube_vals_rec(values[1:]))

if __name__==&quot;__main__&quot;:
    print(cube_vals_rec([-2,5,4,-3]))
</code></pre><h3 id="num-greater"><a href="#num-greater" class="headerlink" title="num_greater()"></a>num_greater()</h3><h4 id="question-1"><a href="#question-1" class="headerlink" title="question:"></a>question:</h4><p>3)write a function called num_greater(threshold, values) that takes as inputs a number threshold and a list of numbers values, and that returns the number of elements of values that are greater than threshold that threshold. For example:</p>
<pre><code>num_greater(5,[1,7,3,5,10])     # return    2
num_greater(10,[1,7,3,5,10])    # return    0
</code></pre><h4 id="resolution-1"><a href="#resolution-1" class="headerlink" title="resolution:"></a>resolution:</h4><pre><code>def num_greater(threshold, values):
if len(values)==0:
   return 0
if values[0]&lt;= (threshold):
   return num_greater(threshold, values[1:])
else:
    return 1+ num_greater(threshold, values[1:])

if __name__==&quot;__main__&quot;:
    print(num_greater(5,[1,7,3,5,10]))
    print(num_greater(10,[1,7,3,5,10]))
</code></pre><h3 id="index-last"><a href="#index-last" class="headerlink" title="index_last()"></a>index_last()</h3><h4 id="question-2"><a href="#question-2" class="headerlink" title="question:"></a>question:</h4><p>4.1)write a function index_last(c, s) that takes as inputs a character c and a string s and that uses recursion to find and return the index of the last occurrence of c(if any) in the string s.If the character c is not found in s,please return -1. For example:</p>
<pre><code>index_last(&apos;a&apos;,&apos;banana&apos;)        # return    5
index_last(&apos;x&apos;,&apos;hello&apos;)         # return    -1
</code></pre><h4 id="resolution-2"><a href="#resolution-2" class="headerlink" title="resolution:"></a>resolution:</h4><pre><code>def index_last(c,s):
if(len(s)==0):
    return -1
elif(c==s[-1]):
    return len(s)-1
else:
    return index_last(c,s[:-1])

if __name__==&quot;__main__&quot;:
    print( index_last(&apos;a&apos;,&apos;banana&apos;))
    print( index_last(&apos;x&apos;,&apos;hello&apos;))
</code></pre><h3 id="lcs"><a href="#lcs" class="headerlink" title="lcs()"></a>lcs()</h3><h4 id="question-3"><a href="#question-3" class="headerlink" title="question:"></a>question:</h4><p>4.3)write a function lcs(s1, s2) that takes two strings s2 and s2 and uses recursion to return the longest common subsequence(LCS) that they share.The LCS is a string whose letters appear in both s1 and s2; these letters must appear in the same order in both s1 and s2,but not necessarily comsecutively. For example:</p>
<pre><code>lcs(&apos;human&apos;, &apos;chimp&apos;)           # return    &apos;hm&apos;
lcs(&apos;abcdefg&apos;,&apos;efghabcd&apos;)       # return    &apos;abcd&apos; (&apos;efgh&apos; would also be fine)
</code></pre><h4 id="resolution-3"><a href="#resolution-3" class="headerlink" title="resolution:"></a>resolution:</h4><pre><code>def lcs(s1,s2):
if(len(s1)==0 or len(s2)==0):
    return &apos;&apos;
elif(s1[0]==s2[0]):
    return s1[0]+lcs(s1[1:],s2[1:])
else:
    result1 = lcs(s1[1:],s2)
    result2 = lcs(s1,s2[1:])
    if (len(result1)&gt;len(result2)):
        return result1
    else:
        return result2

if __name__==&quot;__main__&quot;:
    print( lcs(&apos;human&apos;, &apos;chimp&apos;))
    print( lcs(&apos;gattaca&apos;,&apos;tacgaata&apos;))
    print( lcs(&apos;&apos;,&apos;whew&apos;))
    print( lcs(&apos;abcdefg&apos;,&apos;efghabcd&apos;))
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tkinter实践]]></title>
      <url>http://yoursite.com/2016/10/07/Tkinter%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p><img src="/img/python_logo.jpg" width="900" height="600" alt="python_logo" align="center"><br>Tkinter模块是Python的标准Tk GUI工具包的接口,可以在大多数的Unix平台下使用,同样可以应用在Windows和Macintosh系统里，是一款简单易用的跨平台python库。<br><a id="more"></a></p>
<h2 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h2><ul>
<li>电脑系统：windows10 64bit</li>
<li>python版本： 3.5.2 64bit</li>
<li>IDE： PyCharm Community Edition 2016.2.2</li>
</ul>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><ul>
<li>单词自考自查工具</li>
<li>读取xlsx格式的词典，可进行中译英，英译中的顺序或随机自查，对结果可保存为txt格式的文本</li>
<li>自动记录中-&gt;英错误次数，以日志形式保存</li>
<li>具体见程序的版本信息部分</li>
</ul>
<h2 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h2><ul>
<li>tkinter</li>
<li>os</li>
<li>xlrd</li>
<li>xlwt</li>
<li>xlutils</li>
<li>random</li>
<li>pyinstaller</li>
</ul>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/chenxiaoyu2016/tkinter_dict/blob/master/tkinter_dict.py" target="_blank" rel="external">完整python源码</a></p>
<h2 id="可执行文件（-exe）"><a href="#可执行文件（-exe）" class="headerlink" title="可执行文件（.exe）"></a>可执行文件（.exe）</h2><p><a href="https://github.com/chenxiaoyu2016/tkinter_dict/tree/master/build_version4" target="_blank" rel="external">windows下可执行文件</a></p>
<h2 id="部分细节说明"><a href="#部分细节说明" class="headerlink" title="部分细节说明"></a>部分细节说明</h2><h3 id="自定义窗体返回按钮功能"><a href="#自定义窗体返回按钮功能" class="headerlink" title="自定义窗体返回按钮功能"></a>自定义窗体返回按钮功能</h3><pre><code>root=Tk()
root.geometry(&quot;800x500&quot;)
root.protocol(&quot;WM_DELETE_WINDOW&quot;, callback)
</code></pre><p> callback函数功能可自定义，调用root的destroy方法可关闭窗体。</p>
<h3 id="使光标默认聚焦在某一控件"><a href="#使光标默认聚焦在某一控件" class="headerlink" title="使光标默认聚焦在某一控件"></a>使光标默认聚焦在某一控件</h3><pre><code># create Entry module
e = StringVar()
entry = Entry(root, validate=&apos;key&apos;, textvariable=e, width=20,font=(&quot;宋体&quot;, 18, &quot;bold&quot;))
entry.pack()
entry.bind(&apos;&lt;Return&gt;&apos;, rtnkey)
entry.focus_force()
</code></pre><p>很多控件都有focus_force方法，该方法即会将光标默认设在对应控件上。</p>
<h3 id="使滚动条自动滚动到最底部"><a href="#使滚动条自动滚动到最底部" class="headerlink" title="使滚动条自动滚动到最底部"></a>使滚动条自动滚动到最底部</h3><pre><code># create text module
textPad=Text(root,undo=True)
textPad.pack(expand=YES,fill=BOTH)

#create scroll bar
scroll=Scrollbar(textPad)
textPad.config(yscrollcommand=scroll.set)
scroll.config(command=textPad.yview)
scroll.config(cursor=&apos;hand2&apos;)
scroll.pack(side=RIGHT,fill=Y)

textPad.insert(CURRENT,&apos;\n&apos;)
textPad.see(END)
</code></pre><p>关键在最后两行，text组件的插入使用insert方法，示例中在当前位置CURRENT插入了一个换行符，see方法（参数为END）可使text组件处在可见内容的最尾部，即可使滚动条默认处在最底部。<br>如果滚动条没有处在最底部就调用text组件的insert方法，会在界面显示可见的最后一行插入，而不是text组件整体的CURRENT位置插入。</p>
<h3 id="xls-xlsx文件的读-写-改写"><a href="#xls-xlsx文件的读-写-改写" class="headerlink" title="xls/xlsx文件的读/写/改写"></a>xls/xlsx文件的读/写/改写</h3><pre><code># read a xls/xlsx file
import xlrd
file = &apos;C:/Users/chenxy/Desktop/tkinter_dict/test_data.xlsx&apos;
raw_data = xlrd.open_workbook(file)
table = raw_data.sheets()[0]
col0 = table.col_values(0)
row0 = table.row_values(0)
</code></pre><p>xlrd的文件读取，对于xls，xlsx都没问题。</p>
<pre><code>#write a new xls file 
import xlwt
file = xlwt.Workbook()
table = file.add_sheet(&apos;sheet1&apos;, cell_overwrite_ok=True)
table.write(0, 0, &apos;[0,0]&apos;)
for i in range(0, 10):
    table.write(0 , i, &apos;[0,&apos;+str(i)+&apos;]&apos;)
file.save(&apos;C:/Users/chenxy/Desktop/tkinter_dict/new_data.xls&apos;)
</code></pre><p>cell_overwrite_ok=True可以使文件在保存之前重写，<br>xlwt只能生成xls文件；生成xlsx文件也不会报错，但无法打开，显示已损坏。可能跟python版本有关，换成低版本也许能表现正常。</p>
<pre><code>#rewrite a xls file existed
import xlutils
file = &apos;C:/Users/chenxy/Desktop/tkinter_dict/test_data.xlsx&apos;
raw_data = xlrd.open_workbook(file)
file_copy = xlutils.copy.copy(raw_data)
table = file_copy.get_sheet(0)
for i in range(0, 10):
    table.write(0 , i, &apos;[0,&apos;+str(i)+&apos;]&apos;)
file_copy.save(&apos;C:/Users/chenxy/Desktop/tkinter_dict/test_data.xlsx&apos;)
</code></pre><p>使用xlutils的copy方法，之后的部分按照xlrd的相似方式写即可。<br>注：xlutils是基于xlrd和xlwt的。</p>
<h3 id="python代码打包成exe文件"><a href="#python代码打包成exe文件" class="headerlink" title="python代码打包成exe文件"></a>python代码打包成exe文件</h3><p> python有很多用于打包的模块，但对于python3.5，目前能正常使用的貌似只有pyinstaller（并且对于32位，64位都支持）。在cmd中，进入到python文件所在目录，然后执行如下代码：</p>
<pre><code>pyinstaller -F -w 文件名.py
</code></pre><p>-F 表示生成单个可执行文件，即将所有依赖文件都集中到一个exe文件中<br>-w 表示去掉控制台窗口，这在GUI界面时非常有用。不过如果是命令行程序的话那要把这个选项删除</p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>http://yoursite.com/about/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[categories]]></title>
      <url>http://yoursite.com/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>http://yoursite.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
